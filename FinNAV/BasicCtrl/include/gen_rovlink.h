// Target: C
// Generated by bubbler
// DO NOT EDIT

// Struct: RovSensorCabTempHumidPressData [6] {3 fields}
struct RovSensorCabTempHumidPressData {
    // [0, 2) NormalField: uint16 temperature[2]
    uint16_t temperature;
    // [2, 4) NormalField: uint16 humidity[2]
    uint16_t humidity;
    // [4, 6) NormalField: uint16 pressure[2]
    uint16_t pressure;
};

// Methods: uint16 temperature[2]
// Getter: RovSensorCabTempHumidPressData_GetRaw_temperature
static uint16_t RovSensorCabTempHumidPressData_GetRaw_temperature(struct RovSensorCabTempHumidPressData* value) {
    return value->temperature;
}

// Setter: RovSensorCabTempHumidPressData_SetRaw_temperature
static void RovSensorCabTempHumidPressData_SetRaw_temperature(struct RovSensorCabTempHumidPressData* structPtr, uint16_t value) {
    structPtr->temperature = value;
}

// Getter: RovSensorCabTempHumidPressData_Get_temperature
static double RovSensorCabTempHumidPressData_Get_temperature(struct RovSensorCabTempHumidPressData* value) {
    return (value->temperature / 100);
}

// Setter: RovSensorCabTempHumidPressData_Set_temperature
static void RovSensorCabTempHumidPressData_Set_temperature(struct RovSensorCabTempHumidPressData* structPtr, double value) {
    structPtr->temperature = (uint16_t)((value * 100));
}

// Methods: uint16 humidity[2]
// Getter: RovSensorCabTempHumidPressData_GetRaw_humidity
static uint16_t RovSensorCabTempHumidPressData_GetRaw_humidity(struct RovSensorCabTempHumidPressData* value) {
    return value->humidity;
}

// Setter: RovSensorCabTempHumidPressData_SetRaw_humidity
static void RovSensorCabTempHumidPressData_SetRaw_humidity(struct RovSensorCabTempHumidPressData* structPtr, uint16_t value) {
    structPtr->humidity = value;
}

// Getter: RovSensorCabTempHumidPressData_Get_humidity
static double RovSensorCabTempHumidPressData_Get_humidity(struct RovSensorCabTempHumidPressData* value) {
    return (value->humidity / 100);
}

// Setter: RovSensorCabTempHumidPressData_Set_humidity
static void RovSensorCabTempHumidPressData_Set_humidity(struct RovSensorCabTempHumidPressData* structPtr, double value) {
    structPtr->humidity = (uint16_t)((value * 100));
}

// Methods: uint16 pressure[2]
// Getter: RovSensorCabTempHumidPressData_GetRaw_pressure
static uint16_t RovSensorCabTempHumidPressData_GetRaw_pressure(struct RovSensorCabTempHumidPressData* value) {
    return value->pressure;
}

// Setter: RovSensorCabTempHumidPressData_SetRaw_pressure
static void RovSensorCabTempHumidPressData_SetRaw_pressure(struct RovSensorCabTempHumidPressData* structPtr, uint16_t value) {
    structPtr->pressure = value;
}

// Getter: RovSensorCabTempHumidPressData_Get_pressure
static double RovSensorCabTempHumidPressData_Get_pressure(struct RovSensorCabTempHumidPressData* value) {
    return (value->pressure / 100);
}

// Setter: RovSensorCabTempHumidPressData_Set_pressure
static void RovSensorCabTempHumidPressData_Set_pressure(struct RovSensorCabTempHumidPressData* structPtr, double value) {
    structPtr->pressure = (uint16_t)((value * 100));
}

static const unsigned long long RovSensorCabTempHumidPressData_Size = 6;
// Encoder: RovSensorCabTempHumidPressData
static void RovSensorCabTempHumidPressData_Encode(struct RovSensorCabTempHumidPressData* structPtr, void* data) {
    // [0, 2) uint16 temperature[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->temperature))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->temperature))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 humidity[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->humidity))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->humidity))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 pressure[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->pressure))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->pressure))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovSensorCabTempHumidPressData
static bool RovSensorCabTempHumidPressData_Decode(void* data, struct RovSensorCabTempHumidPressData* structPtr) {
    // [0, 2) uint16 temperature[2]
    (*(uint16_t*)(&(structPtr->temperature))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->temperature))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 humidity[2]
    (*(uint16_t*)(&(structPtr->humidity))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->humidity))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 pressure[2]
    (*(uint16_t*)(&(structPtr->pressure))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pressure))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovSensorWaterTempDepthPressData [6] {3 fields}
struct RovSensorWaterTempDepthPressData {
    // [0, 2) NormalField: uint16 temperature[2]
    uint16_t temperature;
    // [2, 4) NormalField: uint16 depth[2]
    uint16_t depth;
    // [4, 6) NormalField: uint16 pressure[2]
    uint16_t pressure;
};

// Methods: uint16 temperature[2]
// Getter: RovSensorWaterTempDepthPressData_GetRaw_temperature
static uint16_t RovSensorWaterTempDepthPressData_GetRaw_temperature(struct RovSensorWaterTempDepthPressData* value) {
    return value->temperature;
}

// Setter: RovSensorWaterTempDepthPressData_SetRaw_temperature
static void RovSensorWaterTempDepthPressData_SetRaw_temperature(struct RovSensorWaterTempDepthPressData* structPtr, uint16_t value) {
    structPtr->temperature = value;
}

// Getter: RovSensorWaterTempDepthPressData_Get_temperature
static double RovSensorWaterTempDepthPressData_Get_temperature(struct RovSensorWaterTempDepthPressData* value) {
    return (value->temperature / 100);
}

// Setter: RovSensorWaterTempDepthPressData_Set_temperature
static void RovSensorWaterTempDepthPressData_Set_temperature(struct RovSensorWaterTempDepthPressData* structPtr, double value) {
    structPtr->temperature = (uint16_t)((value * 100));
}

// Methods: uint16 depth[2]
// Getter: RovSensorWaterTempDepthPressData_GetRaw_depth
static uint16_t RovSensorWaterTempDepthPressData_GetRaw_depth(struct RovSensorWaterTempDepthPressData* value) {
    return value->depth;
}

// Setter: RovSensorWaterTempDepthPressData_SetRaw_depth
static void RovSensorWaterTempDepthPressData_SetRaw_depth(struct RovSensorWaterTempDepthPressData* structPtr, uint16_t value) {
    structPtr->depth = value;
}

// Getter: RovSensorWaterTempDepthPressData_Get_depth_trustable
static bool RovSensorWaterTempDepthPressData_Get_depth_trustable(struct RovSensorWaterTempDepthPressData* value) {
    return (((value->depth / 100) < 1) ? false : true);
}

// Getter: RovSensorWaterTempDepthPressData_Get_depth_confidence
static int32_t RovSensorWaterTempDepthPressData_Get_depth_confidence(struct RovSensorWaterTempDepthPressData* value) {
    return (((value->depth / 100) < 1) ? 0 : 100);
}

// Getter: RovSensorWaterTempDepthPressData_Get_depth
static double RovSensorWaterTempDepthPressData_Get_depth(struct RovSensorWaterTempDepthPressData* value) {
    return (value->depth / 100);
}

// Setter: RovSensorWaterTempDepthPressData_Set_depth
static void RovSensorWaterTempDepthPressData_Set_depth(struct RovSensorWaterTempDepthPressData* structPtr, double value) {
    structPtr->depth = (uint16_t)((value * 100));
}

// Methods: uint16 pressure[2]
// Getter: RovSensorWaterTempDepthPressData_GetRaw_pressure
static uint16_t RovSensorWaterTempDepthPressData_GetRaw_pressure(struct RovSensorWaterTempDepthPressData* value) {
    return value->pressure;
}

// Setter: RovSensorWaterTempDepthPressData_SetRaw_pressure
static void RovSensorWaterTempDepthPressData_SetRaw_pressure(struct RovSensorWaterTempDepthPressData* structPtr, uint16_t value) {
    structPtr->pressure = value;
}

// Getter: RovSensorWaterTempDepthPressData_Get_pressure
static double RovSensorWaterTempDepthPressData_Get_pressure(struct RovSensorWaterTempDepthPressData* value) {
    return (value->pressure / 100);
}

// Setter: RovSensorWaterTempDepthPressData_Set_pressure
static void RovSensorWaterTempDepthPressData_Set_pressure(struct RovSensorWaterTempDepthPressData* structPtr, double value) {
    structPtr->pressure = (uint16_t)((value * 100));
}

static const unsigned long long RovSensorWaterTempDepthPressData_Size = 6;
// Encoder: RovSensorWaterTempDepthPressData
static void RovSensorWaterTempDepthPressData_Encode(struct RovSensorWaterTempDepthPressData* structPtr, void* data) {
    // [0, 2) uint16 temperature[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->temperature))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->temperature))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 depth[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->depth))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->depth))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 pressure[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->pressure))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->pressure))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovSensorWaterTempDepthPressData
static bool RovSensorWaterTempDepthPressData_Decode(void* data, struct RovSensorWaterTempDepthPressData* structPtr) {
    // [0, 2) uint16 temperature[2]
    (*(uint16_t*)(&(structPtr->temperature))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->temperature))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 depth[2]
    (*(uint16_t*)(&(structPtr->depth))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->depth))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 pressure[2]
    (*(uint16_t*)(&(structPtr->pressure))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pressure))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovSensorAccelerationData [6] {3 fields}
struct RovSensorAccelerationData {
    // [0, 2) NormalField: uint16 x[2]
    uint16_t x;
    // [2, 4) NormalField: uint16 y[2]
    uint16_t y;
    // [4, 6) NormalField: uint16 z[2]
    uint16_t z;
};

// Methods: uint16 x[2]
// Getter: RovSensorAccelerationData_GetRaw_x
static uint16_t RovSensorAccelerationData_GetRaw_x(struct RovSensorAccelerationData* value) {
    return value->x;
}

// Setter: RovSensorAccelerationData_SetRaw_x
static void RovSensorAccelerationData_SetRaw_x(struct RovSensorAccelerationData* structPtr, uint16_t value) {
    structPtr->x = value;
}

// Getter: RovSensorAccelerationData_Get_x
static double RovSensorAccelerationData_Get_x(struct RovSensorAccelerationData* value) {
    return (((value->x / 32768) * 16) * 9.8);
}

// Setter: RovSensorAccelerationData_Set_x
static void RovSensorAccelerationData_Set_x(struct RovSensorAccelerationData* structPtr, double value) {
    structPtr->x = (uint16_t)((((value / 16) / 9.8) * 32768));
}

// Methods: uint16 y[2]
// Getter: RovSensorAccelerationData_GetRaw_y
static uint16_t RovSensorAccelerationData_GetRaw_y(struct RovSensorAccelerationData* value) {
    return value->y;
}

// Setter: RovSensorAccelerationData_SetRaw_y
static void RovSensorAccelerationData_SetRaw_y(struct RovSensorAccelerationData* structPtr, uint16_t value) {
    structPtr->y = value;
}

// Getter: RovSensorAccelerationData_Get_y
static double RovSensorAccelerationData_Get_y(struct RovSensorAccelerationData* value) {
    return (((value->y / 32768) * 16) * 9.8);
}

// Setter: RovSensorAccelerationData_Set_y
static void RovSensorAccelerationData_Set_y(struct RovSensorAccelerationData* structPtr, double value) {
    structPtr->y = (uint16_t)((((value / 16) / 9.8) * 32768));
}

// Methods: uint16 z[2]
// Getter: RovSensorAccelerationData_GetRaw_z
static uint16_t RovSensorAccelerationData_GetRaw_z(struct RovSensorAccelerationData* value) {
    return value->z;
}

// Setter: RovSensorAccelerationData_SetRaw_z
static void RovSensorAccelerationData_SetRaw_z(struct RovSensorAccelerationData* structPtr, uint16_t value) {
    structPtr->z = value;
}

// Getter: RovSensorAccelerationData_Get_z
static double RovSensorAccelerationData_Get_z(struct RovSensorAccelerationData* value) {
    return (((value->z / 32768) * 16) * 9.8);
}

// Setter: RovSensorAccelerationData_Set_z
static void RovSensorAccelerationData_Set_z(struct RovSensorAccelerationData* structPtr, double value) {
    structPtr->z = (uint16_t)((((value / 16) / 9.8) * 32768));
}

static const unsigned long long RovSensorAccelerationData_Size = 6;
// Encoder: RovSensorAccelerationData
static void RovSensorAccelerationData_Encode(struct RovSensorAccelerationData* structPtr, void* data) {
    // [0, 2) uint16 x[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->x))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->x))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 y[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->y))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->y))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 z[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->z))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->z))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovSensorAccelerationData
static bool RovSensorAccelerationData_Decode(void* data, struct RovSensorAccelerationData* structPtr) {
    // [0, 2) uint16 x[2]
    (*(uint16_t*)(&(structPtr->x))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->x))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 y[2]
    (*(uint16_t*)(&(structPtr->y))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->y))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 z[2]
    (*(uint16_t*)(&(structPtr->z))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->z))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovSensorAngularVelocityData [6] {3 fields}
struct RovSensorAngularVelocityData {
    // [0, 2) NormalField: uint16 x[2]
    uint16_t x;
    // [2, 4) NormalField: uint16 y[2]
    uint16_t y;
    // [4, 6) NormalField: uint16 z[2]
    uint16_t z;
};

// Methods: uint16 x[2]
// Getter: RovSensorAngularVelocityData_GetRaw_x
static uint16_t RovSensorAngularVelocityData_GetRaw_x(struct RovSensorAngularVelocityData* value) {
    return value->x;
}

// Setter: RovSensorAngularVelocityData_SetRaw_x
static void RovSensorAngularVelocityData_SetRaw_x(struct RovSensorAngularVelocityData* structPtr, uint16_t value) {
    structPtr->x = value;
}

// Getter: RovSensorAngularVelocityData_Get_x
static double RovSensorAngularVelocityData_Get_x(struct RovSensorAngularVelocityData* value) {
    return ((value->x / 32768) * 2000);
}

// Setter: RovSensorAngularVelocityData_Set_x
static void RovSensorAngularVelocityData_Set_x(struct RovSensorAngularVelocityData* structPtr, double value) {
    structPtr->x = (uint16_t)(((value / 2000) * 32768));
}

// Methods: uint16 y[2]
// Getter: RovSensorAngularVelocityData_GetRaw_y
static uint16_t RovSensorAngularVelocityData_GetRaw_y(struct RovSensorAngularVelocityData* value) {
    return value->y;
}

// Setter: RovSensorAngularVelocityData_SetRaw_y
static void RovSensorAngularVelocityData_SetRaw_y(struct RovSensorAngularVelocityData* structPtr, uint16_t value) {
    structPtr->y = value;
}

// Getter: RovSensorAngularVelocityData_Get_y
static double RovSensorAngularVelocityData_Get_y(struct RovSensorAngularVelocityData* value) {
    return ((value->y / 32768) * 2000);
}

// Setter: RovSensorAngularVelocityData_Set_y
static void RovSensorAngularVelocityData_Set_y(struct RovSensorAngularVelocityData* structPtr, double value) {
    structPtr->y = (uint16_t)(((value / 2000) * 32768));
}

// Methods: uint16 z[2]
// Getter: RovSensorAngularVelocityData_GetRaw_z
static uint16_t RovSensorAngularVelocityData_GetRaw_z(struct RovSensorAngularVelocityData* value) {
    return value->z;
}

// Setter: RovSensorAngularVelocityData_SetRaw_z
static void RovSensorAngularVelocityData_SetRaw_z(struct RovSensorAngularVelocityData* structPtr, uint16_t value) {
    structPtr->z = value;
}

// Getter: RovSensorAngularVelocityData_Get_z
static double RovSensorAngularVelocityData_Get_z(struct RovSensorAngularVelocityData* value) {
    return ((value->z / 32768) * 2000);
}

// Setter: RovSensorAngularVelocityData_Set_z
static void RovSensorAngularVelocityData_Set_z(struct RovSensorAngularVelocityData* structPtr, double value) {
    structPtr->z = (uint16_t)(((value / 2000) * 32768));
}

static const unsigned long long RovSensorAngularVelocityData_Size = 6;
// Encoder: RovSensorAngularVelocityData
static void RovSensorAngularVelocityData_Encode(struct RovSensorAngularVelocityData* structPtr, void* data) {
    // [0, 2) uint16 x[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->x))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->x))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 y[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->y))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->y))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 z[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->z))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->z))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovSensorAngularVelocityData
static bool RovSensorAngularVelocityData_Decode(void* data, struct RovSensorAngularVelocityData* structPtr) {
    // [0, 2) uint16 x[2]
    (*(uint16_t*)(&(structPtr->x))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->x))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 y[2]
    (*(uint16_t*)(&(structPtr->y))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->y))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 z[2]
    (*(uint16_t*)(&(structPtr->z))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->z))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovSensorEulerAngleData [6] {3 fields}
struct RovSensorEulerAngleData {
    // [0, 2) NormalField: int16 pitch[2]
    int16_t pitch;
    // [2, 4) NormalField: int16 roll[2]
    int16_t roll;
    // [4, 6) NormalField: uint16 yaw[2]
    uint16_t yaw;
};

// Methods: int16 pitch[2]
// Getter: RovSensorEulerAngleData_GetRaw_pitch
static int16_t RovSensorEulerAngleData_GetRaw_pitch(struct RovSensorEulerAngleData* value) {
    return value->pitch;
}

// Setter: RovSensorEulerAngleData_SetRaw_pitch
static void RovSensorEulerAngleData_SetRaw_pitch(struct RovSensorEulerAngleData* structPtr, int16_t value) {
    structPtr->pitch = value;
}

// Getter: RovSensorEulerAngleData_Get_pitch
static double RovSensorEulerAngleData_Get_pitch(struct RovSensorEulerAngleData* value) {
    return (double)(value->pitch);
}

// Setter: RovSensorEulerAngleData_Set_pitch
static void RovSensorEulerAngleData_Set_pitch(struct RovSensorEulerAngleData* structPtr, double value) {
    structPtr->pitch = (int16_t)(value);
}

// Methods: int16 roll[2]
// Getter: RovSensorEulerAngleData_GetRaw_roll
static int16_t RovSensorEulerAngleData_GetRaw_roll(struct RovSensorEulerAngleData* value) {
    return value->roll;
}

// Setter: RovSensorEulerAngleData_SetRaw_roll
static void RovSensorEulerAngleData_SetRaw_roll(struct RovSensorEulerAngleData* structPtr, int16_t value) {
    structPtr->roll = value;
}

// Getter: RovSensorEulerAngleData_Get_roll
static double RovSensorEulerAngleData_Get_roll(struct RovSensorEulerAngleData* value) {
    return (double)(value->roll);
}

// Setter: RovSensorEulerAngleData_Set_roll
static void RovSensorEulerAngleData_Set_roll(struct RovSensorEulerAngleData* structPtr, double value) {
    structPtr->roll = (int16_t)(value);
}

// Methods: uint16 yaw[2]
// Getter: RovSensorEulerAngleData_GetRaw_yaw
static uint16_t RovSensorEulerAngleData_GetRaw_yaw(struct RovSensorEulerAngleData* value) {
    return value->yaw;
}

// Setter: RovSensorEulerAngleData_SetRaw_yaw
static void RovSensorEulerAngleData_SetRaw_yaw(struct RovSensorEulerAngleData* structPtr, uint16_t value) {
    structPtr->yaw = value;
}

// Getter: RovSensorEulerAngleData_Get_yaw
static double RovSensorEulerAngleData_Get_yaw(struct RovSensorEulerAngleData* value) {
    return (double)(((uint32_t)(value->yaw + 180) % 360));
}

// Setter: RovSensorEulerAngleData_Set_yaw
static void RovSensorEulerAngleData_Set_yaw(struct RovSensorEulerAngleData* structPtr, double value) {
    structPtr->yaw = (uint16_t)(((uint32_t)(value + 180) % 360));
}

static const unsigned long long RovSensorEulerAngleData_Size = 6;
// Encoder: RovSensorEulerAngleData
static void RovSensorEulerAngleData_Encode(struct RovSensorEulerAngleData* structPtr, void* data) {
    // [0, 2) int16 pitch[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->pitch))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->pitch))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) int16 roll[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->roll))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->roll))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 yaw[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->yaw))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->yaw))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovSensorEulerAngleData
static bool RovSensorEulerAngleData_Decode(void* data, struct RovSensorEulerAngleData* structPtr) {
    // [0, 2) int16 pitch[2]
    (*(uint16_t*)(&(structPtr->pitch))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pitch))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) int16 roll[2]
    (*(uint16_t*)(&(structPtr->roll))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->roll))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 yaw[2]
    (*(uint16_t*)(&(structPtr->yaw))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->yaw))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovSensorMagneticFieldData [6] {3 fields}
struct RovSensorMagneticFieldData {
    // [0, 2) NormalField: uint16 x[2]
    uint16_t x;
    // [2, 4) NormalField: uint16 y[2]
    uint16_t y;
    // [4, 6) NormalField: uint16 z[2]
    uint16_t z;
};

// Methods: uint16 x[2]
// Getter: RovSensorMagneticFieldData_GetRaw_x
static uint16_t RovSensorMagneticFieldData_GetRaw_x(struct RovSensorMagneticFieldData* value) {
    return value->x;
}

// Setter: RovSensorMagneticFieldData_SetRaw_x
static void RovSensorMagneticFieldData_SetRaw_x(struct RovSensorMagneticFieldData* structPtr, uint16_t value) {
    structPtr->x = value;
}

// Getter: RovSensorMagneticFieldData_Get_x
static double RovSensorMagneticFieldData_Get_x(struct RovSensorMagneticFieldData* value) {
    return ((value->x / 32768) * 4912);
}

// Setter: RovSensorMagneticFieldData_Set_x
static void RovSensorMagneticFieldData_Set_x(struct RovSensorMagneticFieldData* structPtr, double value) {
    structPtr->x = (uint16_t)(((value / 4912) * 32768));
}

// Methods: uint16 y[2]
// Getter: RovSensorMagneticFieldData_GetRaw_y
static uint16_t RovSensorMagneticFieldData_GetRaw_y(struct RovSensorMagneticFieldData* value) {
    return value->y;
}

// Setter: RovSensorMagneticFieldData_SetRaw_y
static void RovSensorMagneticFieldData_SetRaw_y(struct RovSensorMagneticFieldData* structPtr, uint16_t value) {
    structPtr->y = value;
}

// Getter: RovSensorMagneticFieldData_Get_y
static double RovSensorMagneticFieldData_Get_y(struct RovSensorMagneticFieldData* value) {
    return ((value->y / 32768) * 4912);
}

// Setter: RovSensorMagneticFieldData_Set_y
static void RovSensorMagneticFieldData_Set_y(struct RovSensorMagneticFieldData* structPtr, double value) {
    structPtr->y = (uint16_t)(((value / 4912) * 32768));
}

// Methods: uint16 z[2]
// Getter: RovSensorMagneticFieldData_GetRaw_z
static uint16_t RovSensorMagneticFieldData_GetRaw_z(struct RovSensorMagneticFieldData* value) {
    return value->z;
}

// Setter: RovSensorMagneticFieldData_SetRaw_z
static void RovSensorMagneticFieldData_SetRaw_z(struct RovSensorMagneticFieldData* structPtr, uint16_t value) {
    structPtr->z = value;
}

// Getter: RovSensorMagneticFieldData_Get_z
static double RovSensorMagneticFieldData_Get_z(struct RovSensorMagneticFieldData* value) {
    return ((value->z / 32768) * 4912);
}

// Setter: RovSensorMagneticFieldData_Set_z
static void RovSensorMagneticFieldData_Set_z(struct RovSensorMagneticFieldData* structPtr, double value) {
    structPtr->z = (uint16_t)(((value / 4912) * 32768));
}

static const unsigned long long RovSensorMagneticFieldData_Size = 6;
// Encoder: RovSensorMagneticFieldData
static void RovSensorMagneticFieldData_Encode(struct RovSensorMagneticFieldData* structPtr, void* data) {
    // [0, 2) uint16 x[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->x))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->x))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 y[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->y))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->y))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 z[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->z))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->z))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovSensorMagneticFieldData
static bool RovSensorMagneticFieldData_Decode(void* data, struct RovSensorMagneticFieldData* structPtr) {
    // [0, 2) uint16 x[2]
    (*(uint16_t*)(&(structPtr->x))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->x))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 y[2]
    (*(uint16_t*)(&(structPtr->y))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->y))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 z[2]
    (*(uint16_t*)(&(structPtr->z))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->z))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovSensorHeightSonarData [6] {3 fields}
struct RovSensorHeightSonarData {
    // [0, 2) NormalField: uint16 height[2]
    uint16_t height;
    // [2, 4) NormalField: uint16 confidence[2]
    uint16_t confidence;
    // [4, 6) VoidField: void [2]
};

// Methods: uint16 height[2]
// Getter: RovSensorHeightSonarData_GetRaw_height
static uint16_t RovSensorHeightSonarData_GetRaw_height(struct RovSensorHeightSonarData* value) {
    return value->height;
}

// Setter: RovSensorHeightSonarData_SetRaw_height
static void RovSensorHeightSonarData_SetRaw_height(struct RovSensorHeightSonarData* structPtr, uint16_t value) {
    structPtr->height = value;
}

// Getter: RovSensorHeightSonarData_Get_height
static double RovSensorHeightSonarData_Get_height(struct RovSensorHeightSonarData* value) {
    return (value->height / 100);
}

// Setter: RovSensorHeightSonarData_Set_height
static void RovSensorHeightSonarData_Set_height(struct RovSensorHeightSonarData* structPtr, double value) {
    structPtr->height = (uint16_t)((value * 100));
}

// Methods: uint16 confidence[2]
// Getter: RovSensorHeightSonarData_GetRaw_confidence
static uint16_t RovSensorHeightSonarData_GetRaw_confidence(struct RovSensorHeightSonarData* value) {
    return value->confidence;
}

// Setter: RovSensorHeightSonarData_SetRaw_confidence
static void RovSensorHeightSonarData_SetRaw_confidence(struct RovSensorHeightSonarData* structPtr, uint16_t value) {
    structPtr->confidence = value;
}

// Getter: RovSensorHeightSonarData_Get_confidence_trustable
static bool RovSensorHeightSonarData_Get_confidence_trustable(struct RovSensorHeightSonarData* value) {
    return (((value->confidence / 100) <= 95) ? false : true);
}

// Getter: RovSensorHeightSonarData_Get_confidence
static double RovSensorHeightSonarData_Get_confidence(struct RovSensorHeightSonarData* value) {
    return (value->confidence / 100);
}

// Setter: RovSensorHeightSonarData_Set_confidence
static void RovSensorHeightSonarData_Set_confidence(struct RovSensorHeightSonarData* structPtr, double value) {
    structPtr->confidence = (uint16_t)((value * 100));
}

static const unsigned long long RovSensorHeightSonarData_Size = 6;
// Encoder: RovSensorHeightSonarData
static void RovSensorHeightSonarData_Encode(struct RovSensorHeightSonarData* structPtr, void* data) {
    // [0, 2) uint16 height[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->height))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->height))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 confidence[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->confidence))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->confidence))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) void [2]
    ((uint8_t*)data)[4] = (((((0) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((0) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovSensorHeightSonarData
static bool RovSensorHeightSonarData_Decode(void* data, struct RovSensorHeightSonarData* structPtr) {
    // [0, 2) uint16 height[2]
    (*(uint16_t*)(&(structPtr->height))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->height))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 confidence[2]
    (*(uint16_t*)(&(structPtr->confidence))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->confidence))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) void [2]
    return true;
}

// Struct: RovSensorDistanceSonarData [6] {3 fields}
struct RovSensorDistanceSonarData {
    // [0, 2) NormalField: uint16 distance[2]
    uint16_t distance;
    // [2, 4) NormalField: uint16 confidence[2]
    uint16_t confidence;
    // [4, 6) VoidField: void [2]
};

// Methods: uint16 distance[2]
// Getter: RovSensorDistanceSonarData_GetRaw_distance
static uint16_t RovSensorDistanceSonarData_GetRaw_distance(struct RovSensorDistanceSonarData* value) {
    return value->distance;
}

// Setter: RovSensorDistanceSonarData_SetRaw_distance
static void RovSensorDistanceSonarData_SetRaw_distance(struct RovSensorDistanceSonarData* structPtr, uint16_t value) {
    structPtr->distance = value;
}

// Getter: RovSensorDistanceSonarData_Get_distance
static double RovSensorDistanceSonarData_Get_distance(struct RovSensorDistanceSonarData* value) {
    return (value->distance / 100);
}

// Setter: RovSensorDistanceSonarData_Set_distance
static void RovSensorDistanceSonarData_Set_distance(struct RovSensorDistanceSonarData* structPtr, double value) {
    structPtr->distance = (uint16_t)((value * 100));
}

// Methods: uint16 confidence[2]
// Getter: RovSensorDistanceSonarData_GetRaw_confidence
static uint16_t RovSensorDistanceSonarData_GetRaw_confidence(struct RovSensorDistanceSonarData* value) {
    return value->confidence;
}

// Setter: RovSensorDistanceSonarData_SetRaw_confidence
static void RovSensorDistanceSonarData_SetRaw_confidence(struct RovSensorDistanceSonarData* structPtr, uint16_t value) {
    structPtr->confidence = value;
}

// Getter: RovSensorDistanceSonarData_Get_confidence
static double RovSensorDistanceSonarData_Get_confidence(struct RovSensorDistanceSonarData* value) {
    return (value->confidence / 100);
}

// Setter: RovSensorDistanceSonarData_Set_confidence
static void RovSensorDistanceSonarData_Set_confidence(struct RovSensorDistanceSonarData* structPtr, double value) {
    structPtr->confidence = (uint16_t)((value * 100));
}

static const unsigned long long RovSensorDistanceSonarData_Size = 6;
// Encoder: RovSensorDistanceSonarData
static void RovSensorDistanceSonarData_Encode(struct RovSensorDistanceSonarData* structPtr, void* data) {
    // [0, 2) uint16 distance[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->distance))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->distance))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 confidence[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->confidence))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->confidence))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) void [2]
    ((uint8_t*)data)[4] = (((((0) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((0) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovSensorDistanceSonarData
static bool RovSensorDistanceSonarData_Decode(void* data, struct RovSensorDistanceSonarData* structPtr) {
    // [0, 2) uint16 distance[2]
    (*(uint16_t*)(&(structPtr->distance))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->distance))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 confidence[2]
    (*(uint16_t*)(&(structPtr->confidence))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->confidence))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) void [2]
    return true;
}

// Struct: RovControlPropellerAData [6] {3 fields}
struct RovControlPropellerAData {
    // [0, 2) NormalField: uint16 a1[2]
    uint16_t a1;
    // [2, 4) NormalField: uint16 a2[2]
    uint16_t a2;
    // [4, 6) NormalField: uint16 a3[2]
    uint16_t a3;
};

// Methods: uint16 a1[2]
// Getter: RovControlPropellerAData_GetRaw_a1
static uint16_t RovControlPropellerAData_GetRaw_a1(struct RovControlPropellerAData* value) {
    return value->a1;
}

// Setter: RovControlPropellerAData_SetRaw_a1
static void RovControlPropellerAData_SetRaw_a1(struct RovControlPropellerAData* structPtr, uint16_t value) {
    structPtr->a1 = value;
}

// Methods: uint16 a2[2]
// Getter: RovControlPropellerAData_GetRaw_a2
static uint16_t RovControlPropellerAData_GetRaw_a2(struct RovControlPropellerAData* value) {
    return value->a2;
}

// Setter: RovControlPropellerAData_SetRaw_a2
static void RovControlPropellerAData_SetRaw_a2(struct RovControlPropellerAData* structPtr, uint16_t value) {
    structPtr->a2 = value;
}

// Methods: uint16 a3[2]
// Getter: RovControlPropellerAData_GetRaw_a3
static uint16_t RovControlPropellerAData_GetRaw_a3(struct RovControlPropellerAData* value) {
    return value->a3;
}

// Setter: RovControlPropellerAData_SetRaw_a3
static void RovControlPropellerAData_SetRaw_a3(struct RovControlPropellerAData* structPtr, uint16_t value) {
    structPtr->a3 = value;
}

static const unsigned long long RovControlPropellerAData_Size = 6;
// Encoder: RovControlPropellerAData
static void RovControlPropellerAData_Encode(struct RovControlPropellerAData* structPtr, void* data) {
    // [0, 2) uint16 a1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->a1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->a1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 a2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->a2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->a2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 a3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->a3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->a3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlPropellerAData
static bool RovControlPropellerAData_Decode(void* data, struct RovControlPropellerAData* structPtr) {
    // [0, 2) uint16 a1[2]
    (*(uint16_t*)(&(structPtr->a1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->a1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 a2[2]
    (*(uint16_t*)(&(structPtr->a2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->a2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 a3[2]
    (*(uint16_t*)(&(structPtr->a3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->a3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlPropellerBData [6] {3 fields}
struct RovControlPropellerBData {
    // [0, 2) NormalField: uint16 b1[2]
    uint16_t b1;
    // [2, 4) NormalField: uint16 b2[2]
    uint16_t b2;
    // [4, 6) NormalField: uint16 b3[2]
    uint16_t b3;
};

// Methods: uint16 b1[2]
// Getter: RovControlPropellerBData_GetRaw_b1
static uint16_t RovControlPropellerBData_GetRaw_b1(struct RovControlPropellerBData* value) {
    return value->b1;
}

// Setter: RovControlPropellerBData_SetRaw_b1
static void RovControlPropellerBData_SetRaw_b1(struct RovControlPropellerBData* structPtr, uint16_t value) {
    structPtr->b1 = value;
}

// Methods: uint16 b2[2]
// Getter: RovControlPropellerBData_GetRaw_b2
static uint16_t RovControlPropellerBData_GetRaw_b2(struct RovControlPropellerBData* value) {
    return value->b2;
}

// Setter: RovControlPropellerBData_SetRaw_b2
static void RovControlPropellerBData_SetRaw_b2(struct RovControlPropellerBData* structPtr, uint16_t value) {
    structPtr->b2 = value;
}

// Methods: uint16 b3[2]
// Getter: RovControlPropellerBData_GetRaw_b3
static uint16_t RovControlPropellerBData_GetRaw_b3(struct RovControlPropellerBData* value) {
    return value->b3;
}

// Setter: RovControlPropellerBData_SetRaw_b3
static void RovControlPropellerBData_SetRaw_b3(struct RovControlPropellerBData* structPtr, uint16_t value) {
    structPtr->b3 = value;
}

static const unsigned long long RovControlPropellerBData_Size = 6;
// Encoder: RovControlPropellerBData
static void RovControlPropellerBData_Encode(struct RovControlPropellerBData* structPtr, void* data) {
    // [0, 2) uint16 b1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->b1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->b1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 b2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->b2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->b2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 b3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->b3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->b3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlPropellerBData
static bool RovControlPropellerBData_Decode(void* data, struct RovControlPropellerBData* structPtr) {
    // [0, 2) uint16 b1[2]
    (*(uint16_t*)(&(structPtr->b1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->b1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 b2[2]
    (*(uint16_t*)(&(structPtr->b2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->b2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 b3[2]
    (*(uint16_t*)(&(structPtr->b3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->b3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlPropellerCData [6] {3 fields}
struct RovControlPropellerCData {
    // [0, 2) NormalField: uint16 c1[2]
    uint16_t c1;
    // [2, 4) NormalField: uint16 c2[2]
    uint16_t c2;
    // [4, 6) NormalField: uint16 c3[2]
    uint16_t c3;
};

// Methods: uint16 c1[2]
// Getter: RovControlPropellerCData_GetRaw_c1
static uint16_t RovControlPropellerCData_GetRaw_c1(struct RovControlPropellerCData* value) {
    return value->c1;
}

// Setter: RovControlPropellerCData_SetRaw_c1
static void RovControlPropellerCData_SetRaw_c1(struct RovControlPropellerCData* structPtr, uint16_t value) {
    structPtr->c1 = value;
}

// Methods: uint16 c2[2]
// Getter: RovControlPropellerCData_GetRaw_c2
static uint16_t RovControlPropellerCData_GetRaw_c2(struct RovControlPropellerCData* value) {
    return value->c2;
}

// Setter: RovControlPropellerCData_SetRaw_c2
static void RovControlPropellerCData_SetRaw_c2(struct RovControlPropellerCData* structPtr, uint16_t value) {
    structPtr->c2 = value;
}

// Methods: uint16 c3[2]
// Getter: RovControlPropellerCData_GetRaw_c3
static uint16_t RovControlPropellerCData_GetRaw_c3(struct RovControlPropellerCData* value) {
    return value->c3;
}

// Setter: RovControlPropellerCData_SetRaw_c3
static void RovControlPropellerCData_SetRaw_c3(struct RovControlPropellerCData* structPtr, uint16_t value) {
    structPtr->c3 = value;
}

static const unsigned long long RovControlPropellerCData_Size = 6;
// Encoder: RovControlPropellerCData
static void RovControlPropellerCData_Encode(struct RovControlPropellerCData* structPtr, void* data) {
    // [0, 2) uint16 c1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->c1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->c1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 c2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->c2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->c2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 c3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->c3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->c3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlPropellerCData
static bool RovControlPropellerCData_Decode(void* data, struct RovControlPropellerCData* structPtr) {
    // [0, 2) uint16 c1[2]
    (*(uint16_t*)(&(structPtr->c1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->c1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 c2[2]
    (*(uint16_t*)(&(structPtr->c2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->c2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 c3[2]
    (*(uint16_t*)(&(structPtr->c3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->c3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlPropellerDData [6] {3 fields}
struct RovControlPropellerDData {
    // [0, 2) NormalField: uint16 d1[2]
    uint16_t d1;
    // [2, 4) NormalField: uint16 d2[2]
    uint16_t d2;
    // [4, 6) NormalField: uint16 d3[2]
    uint16_t d3;
};

// Methods: uint16 d1[2]
// Getter: RovControlPropellerDData_GetRaw_d1
static uint16_t RovControlPropellerDData_GetRaw_d1(struct RovControlPropellerDData* value) {
    return value->d1;
}

// Setter: RovControlPropellerDData_SetRaw_d1
static void RovControlPropellerDData_SetRaw_d1(struct RovControlPropellerDData* structPtr, uint16_t value) {
    structPtr->d1 = value;
}

// Methods: uint16 d2[2]
// Getter: RovControlPropellerDData_GetRaw_d2
static uint16_t RovControlPropellerDData_GetRaw_d2(struct RovControlPropellerDData* value) {
    return value->d2;
}

// Setter: RovControlPropellerDData_SetRaw_d2
static void RovControlPropellerDData_SetRaw_d2(struct RovControlPropellerDData* structPtr, uint16_t value) {
    structPtr->d2 = value;
}

// Methods: uint16 d3[2]
// Getter: RovControlPropellerDData_GetRaw_d3
static uint16_t RovControlPropellerDData_GetRaw_d3(struct RovControlPropellerDData* value) {
    return value->d3;
}

// Setter: RovControlPropellerDData_SetRaw_d3
static void RovControlPropellerDData_SetRaw_d3(struct RovControlPropellerDData* structPtr, uint16_t value) {
    structPtr->d3 = value;
}

static const unsigned long long RovControlPropellerDData_Size = 6;
// Encoder: RovControlPropellerDData
static void RovControlPropellerDData_Encode(struct RovControlPropellerDData* structPtr, void* data) {
    // [0, 2) uint16 d1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->d1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->d1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 d2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->d2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->d2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 d3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->d3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->d3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlPropellerDData
static bool RovControlPropellerDData_Decode(void* data, struct RovControlPropellerDData* structPtr) {
    // [0, 2) uint16 d1[2]
    (*(uint16_t*)(&(structPtr->d1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->d1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 d2[2]
    (*(uint16_t*)(&(structPtr->d2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->d2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 d3[2]
    (*(uint16_t*)(&(structPtr->d3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->d3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlLightAData [6] {3 fields}
struct RovControlLightAData {
    // [0, 2) NormalField: uint16 l1[2]
    uint16_t l1;
    // [2, 4) NormalField: uint16 l2[2]
    uint16_t l2;
    // [4, 6) NormalField: uint16 l3[2]
    uint16_t l3;
};

// Methods: uint16 l1[2]
// Getter: RovControlLightAData_GetRaw_l1
static uint16_t RovControlLightAData_GetRaw_l1(struct RovControlLightAData* value) {
    return value->l1;
}

// Setter: RovControlLightAData_SetRaw_l1
static void RovControlLightAData_SetRaw_l1(struct RovControlLightAData* structPtr, uint16_t value) {
    structPtr->l1 = value;
}

// Getter: RovControlLightAData_Get_l1_percent
static double RovControlLightAData_Get_l1_percent(struct RovControlLightAData* value) {
    return ((value->l1 / 20000) * 100);
}

// Getter: RovControlLightAData_Get_l1_percentInt
static int32_t RovControlLightAData_Get_l1_percentInt(struct RovControlLightAData* value) {
    return (int32_t)((((value->l1 / 20000) * 100) + 0.5));
}

// Setter: RovControlLightAData_Set_l1_percent
static void RovControlLightAData_Set_l1_percent(struct RovControlLightAData* structPtr, double value) {
    structPtr->l1 = ((value < 0.5) ? 0 : value);
}

// Methods: uint16 l2[2]
// Getter: RovControlLightAData_GetRaw_l2
static uint16_t RovControlLightAData_GetRaw_l2(struct RovControlLightAData* value) {
    return value->l2;
}

// Setter: RovControlLightAData_SetRaw_l2
static void RovControlLightAData_SetRaw_l2(struct RovControlLightAData* structPtr, uint16_t value) {
    structPtr->l2 = value;
}

// Getter: RovControlLightAData_Get_l2_percent
static double RovControlLightAData_Get_l2_percent(struct RovControlLightAData* value) {
    return ((value->l2 / 20000) * 100);
}

// Getter: RovControlLightAData_Get_l2_percentInt
static int32_t RovControlLightAData_Get_l2_percentInt(struct RovControlLightAData* value) {
    return (int32_t)((((value->l2 / 20000) * 100) + 0.5));
}

// Setter: RovControlLightAData_Set_l2_percent
static void RovControlLightAData_Set_l2_percent(struct RovControlLightAData* structPtr, double value) {
    structPtr->l2 = ((value < 0.5) ? 0 : value);
}

// Methods: uint16 l3[2]
// Getter: RovControlLightAData_GetRaw_l3
static uint16_t RovControlLightAData_GetRaw_l3(struct RovControlLightAData* value) {
    return value->l3;
}

// Setter: RovControlLightAData_SetRaw_l3
static void RovControlLightAData_SetRaw_l3(struct RovControlLightAData* structPtr, uint16_t value) {
    structPtr->l3 = value;
}

// Getter: RovControlLightAData_Get_l3_percent
static double RovControlLightAData_Get_l3_percent(struct RovControlLightAData* value) {
    return ((value->l3 / 20000) * 100);
}

// Getter: RovControlLightAData_Get_l3_percentInt
static int32_t RovControlLightAData_Get_l3_percentInt(struct RovControlLightAData* value) {
    return (int32_t)((((value->l3 / 20000) * 100) + 0.5));
}

// Setter: RovControlLightAData_Set_l3_percent
static void RovControlLightAData_Set_l3_percent(struct RovControlLightAData* structPtr, double value) {
    structPtr->l3 = ((value < 0.5) ? 0 : value);
}

static const unsigned long long RovControlLightAData_Size = 6;
// Encoder: RovControlLightAData
static void RovControlLightAData_Encode(struct RovControlLightAData* structPtr, void* data) {
    // [0, 2) uint16 l1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->l1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->l1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 l2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->l2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->l2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 l3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->l3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->l3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlLightAData
static bool RovControlLightAData_Decode(void* data, struct RovControlLightAData* structPtr) {
    // [0, 2) uint16 l1[2]
    (*(uint16_t*)(&(structPtr->l1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->l1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 l2[2]
    (*(uint16_t*)(&(structPtr->l2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->l2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 l3[2]
    (*(uint16_t*)(&(structPtr->l3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->l3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlLightBData [6] {3 fields}
struct RovControlLightBData {
    // [0, 2) NormalField: uint16 l4[2]
    uint16_t l4;
    // [2, 4) NormalField: uint16 l5[2]
    uint16_t l5;
    // [4, 6) NormalField: uint16 l6[2]
    uint16_t l6;
};

// Methods: uint16 l4[2]
// Getter: RovControlLightBData_GetRaw_l4
static uint16_t RovControlLightBData_GetRaw_l4(struct RovControlLightBData* value) {
    return value->l4;
}

// Setter: RovControlLightBData_SetRaw_l4
static void RovControlLightBData_SetRaw_l4(struct RovControlLightBData* structPtr, uint16_t value) {
    structPtr->l4 = value;
}

// Getter: RovControlLightBData_Get_l4_percent
static double RovControlLightBData_Get_l4_percent(struct RovControlLightBData* value) {
    return ((value->l4 / 20000) * 100);
}

// Getter: RovControlLightBData_Get_l4_percentInt
static int32_t RovControlLightBData_Get_l4_percentInt(struct RovControlLightBData* value) {
    return (int32_t)((((value->l4 / 20000) * 100) + 0.5));
}

// Setter: RovControlLightBData_Set_l4_percent
static void RovControlLightBData_Set_l4_percent(struct RovControlLightBData* structPtr, double value) {
    structPtr->l4 = ((value < 0.5) ? 0 : value);
}

// Methods: uint16 l5[2]
// Getter: RovControlLightBData_GetRaw_l5
static uint16_t RovControlLightBData_GetRaw_l5(struct RovControlLightBData* value) {
    return value->l5;
}

// Setter: RovControlLightBData_SetRaw_l5
static void RovControlLightBData_SetRaw_l5(struct RovControlLightBData* structPtr, uint16_t value) {
    structPtr->l5 = value;
}

// Getter: RovControlLightBData_Get_l5_percent
static double RovControlLightBData_Get_l5_percent(struct RovControlLightBData* value) {
    return ((value->l5 / 20000) * 100);
}

// Getter: RovControlLightBData_Get_l5_percentInt
static int32_t RovControlLightBData_Get_l5_percentInt(struct RovControlLightBData* value) {
    return (int32_t)((((value->l5 / 20000) * 100) + 0.5));
}

// Setter: RovControlLightBData_Set_l5_percent
static void RovControlLightBData_Set_l5_percent(struct RovControlLightBData* structPtr, double value) {
    structPtr->l5 = ((value < 0.5) ? 0 : value);
}

// Methods: uint16 l6[2]
// Getter: RovControlLightBData_GetRaw_l6
static uint16_t RovControlLightBData_GetRaw_l6(struct RovControlLightBData* value) {
    return value->l6;
}

// Setter: RovControlLightBData_SetRaw_l6
static void RovControlLightBData_SetRaw_l6(struct RovControlLightBData* structPtr, uint16_t value) {
    structPtr->l6 = value;
}

// Getter: RovControlLightBData_Get_l6_percent
static double RovControlLightBData_Get_l6_percent(struct RovControlLightBData* value) {
    return ((value->l6 / 20000) * 100);
}

// Getter: RovControlLightBData_Get_l6_percentInt
static int32_t RovControlLightBData_Get_l6_percentInt(struct RovControlLightBData* value) {
    return (int32_t)((((value->l6 / 20000) * 100) + 0.5));
}

// Setter: RovControlLightBData_Set_l6_percent
static void RovControlLightBData_Set_l6_percent(struct RovControlLightBData* structPtr, double value) {
    structPtr->l6 = ((value < 0.5) ? 0 : value);
}

static const unsigned long long RovControlLightBData_Size = 6;
// Encoder: RovControlLightBData
static void RovControlLightBData_Encode(struct RovControlLightBData* structPtr, void* data) {
    // [0, 2) uint16 l4[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->l4))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->l4))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 l5[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->l5))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->l5))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 l6[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->l6))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->l6))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlLightBData
static bool RovControlLightBData_Decode(void* data, struct RovControlLightBData* structPtr) {
    // [0, 2) uint16 l4[2]
    (*(uint16_t*)(&(structPtr->l4))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->l4))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 l5[2]
    (*(uint16_t*)(&(structPtr->l5))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->l5))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 l6[2]
    (*(uint16_t*)(&(structPtr->l6))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->l6))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlPtzData [6] {3 fields}
struct RovControlPtzData {
    // [0, 2) NormalField: uint16 th1[2]
    uint16_t th1;
    // [2, 4) NormalField: uint16 th2[2]
    uint16_t th2;
    // [4, 6) NormalField: uint16 th3[2]
    uint16_t th3;
};

// Methods: uint16 th1[2]
// Getter: RovControlPtzData_GetRaw_th1
static uint16_t RovControlPtzData_GetRaw_th1(struct RovControlPtzData* value) {
    return value->th1;
}

// Setter: RovControlPtzData_SetRaw_th1
static void RovControlPtzData_SetRaw_th1(struct RovControlPtzData* structPtr, uint16_t value) {
    structPtr->th1 = value;
}

// Getter: RovControlPtzData_Get_th1_angle
static double RovControlPtzData_Get_th1_angle(struct RovControlPtzData* value) {
    return ((((int32_t)(value->th1) - 1500) / 1000) * 166);
}

// Getter: RovControlPtzData_Get_th1_angleInt
static int32_t RovControlPtzData_Get_th1_angleInt(struct RovControlPtzData* value) {
    return (int32_t)((((((int32_t)(value->th1) - 1500) / 1000) * 166) + 0.5));
}

// Methods: uint16 th2[2]
// Getter: RovControlPtzData_GetRaw_th2
static uint16_t RovControlPtzData_GetRaw_th2(struct RovControlPtzData* value) {
    return value->th2;
}

// Setter: RovControlPtzData_SetRaw_th2
static void RovControlPtzData_SetRaw_th2(struct RovControlPtzData* structPtr, uint16_t value) {
    structPtr->th2 = value;
}

// Getter: RovControlPtzData_Get_th2_angle
static double RovControlPtzData_Get_th2_angle(struct RovControlPtzData* value) {
    return ((((int32_t)(value->th2) - 1500) / 1000) * 166);
}

// Getter: RovControlPtzData_Get_th2_angleInt
static int32_t RovControlPtzData_Get_th2_angleInt(struct RovControlPtzData* value) {
    return (int32_t)((((((int32_t)(value->th2) - 1500) / 1000) * 166) + 0.5));
}

// Methods: uint16 th3[2]
// Getter: RovControlPtzData_GetRaw_th3
static uint16_t RovControlPtzData_GetRaw_th3(struct RovControlPtzData* value) {
    return value->th3;
}

// Setter: RovControlPtzData_SetRaw_th3
static void RovControlPtzData_SetRaw_th3(struct RovControlPtzData* structPtr, uint16_t value) {
    structPtr->th3 = value;
}

// Getter: RovControlPtzData_Get_th3_angle
static double RovControlPtzData_Get_th3_angle(struct RovControlPtzData* value) {
    return ((((int32_t)(value->th3) - 1500) / 1000) * 166);
}

// Getter: RovControlPtzData_Get_th3_angleInt
static int32_t RovControlPtzData_Get_th3_angleInt(struct RovControlPtzData* value) {
    return (int32_t)((((((int32_t)(value->th3) - 1500) / 1000) * 166) + 0.5));
}

static const unsigned long long RovControlPtzData_Size = 6;
// Encoder: RovControlPtzData
static void RovControlPtzData_Encode(struct RovControlPtzData* structPtr, void* data) {
    // [0, 2) uint16 th1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->th1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->th1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 th2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->th2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->th2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 th3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->th3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->th3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlPtzData
static bool RovControlPtzData_Decode(void* data, struct RovControlPtzData* structPtr) {
    // [0, 2) uint16 th1[2]
    (*(uint16_t*)(&(structPtr->th1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->th1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 th2[2]
    (*(uint16_t*)(&(structPtr->th2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->th2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 th3[2]
    (*(uint16_t*)(&(structPtr->th3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->th3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlServoAData [6] {3 fields}
struct RovControlServoAData {
    // [0, 2) NormalField: uint16 pwm1[2]
    uint16_t pwm1;
    // [2, 4) NormalField: uint16 pwm2[2]
    uint16_t pwm2;
    // [4, 6) NormalField: uint16 pwm3[2]
    uint16_t pwm3;
};

// Methods: uint16 pwm1[2]
// Getter: RovControlServoAData_GetRaw_pwm1
static uint16_t RovControlServoAData_GetRaw_pwm1(struct RovControlServoAData* value) {
    return value->pwm1;
}

// Setter: RovControlServoAData_SetRaw_pwm1
static void RovControlServoAData_SetRaw_pwm1(struct RovControlServoAData* structPtr, uint16_t value) {
    structPtr->pwm1 = value;
}

// Methods: uint16 pwm2[2]
// Getter: RovControlServoAData_GetRaw_pwm2
static uint16_t RovControlServoAData_GetRaw_pwm2(struct RovControlServoAData* value) {
    return value->pwm2;
}

// Setter: RovControlServoAData_SetRaw_pwm2
static void RovControlServoAData_SetRaw_pwm2(struct RovControlServoAData* structPtr, uint16_t value) {
    structPtr->pwm2 = value;
}

// Methods: uint16 pwm3[2]
// Getter: RovControlServoAData_GetRaw_pwm3
static uint16_t RovControlServoAData_GetRaw_pwm3(struct RovControlServoAData* value) {
    return value->pwm3;
}

// Setter: RovControlServoAData_SetRaw_pwm3
static void RovControlServoAData_SetRaw_pwm3(struct RovControlServoAData* structPtr, uint16_t value) {
    structPtr->pwm3 = value;
}

static const unsigned long long RovControlServoAData_Size = 6;
// Encoder: RovControlServoAData
static void RovControlServoAData_Encode(struct RovControlServoAData* structPtr, void* data) {
    // [0, 2) uint16 pwm1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->pwm1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->pwm1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 pwm2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->pwm2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->pwm2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 pwm3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->pwm3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->pwm3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlServoAData
static bool RovControlServoAData_Decode(void* data, struct RovControlServoAData* structPtr) {
    // [0, 2) uint16 pwm1[2]
    (*(uint16_t*)(&(structPtr->pwm1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 pwm2[2]
    (*(uint16_t*)(&(structPtr->pwm2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 pwm3[2]
    (*(uint16_t*)(&(structPtr->pwm3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlServoBData [6] {3 fields}
struct RovControlServoBData {
    // [0, 2) NormalField: uint16 pwm4[2]
    uint16_t pwm4;
    // [2, 4) NormalField: uint16 pwm5[2]
    uint16_t pwm5;
    // [4, 6) NormalField: uint16 pwm6[2]
    uint16_t pwm6;
};

// Methods: uint16 pwm4[2]
// Getter: RovControlServoBData_GetRaw_pwm4
static uint16_t RovControlServoBData_GetRaw_pwm4(struct RovControlServoBData* value) {
    return value->pwm4;
}

// Setter: RovControlServoBData_SetRaw_pwm4
static void RovControlServoBData_SetRaw_pwm4(struct RovControlServoBData* structPtr, uint16_t value) {
    structPtr->pwm4 = value;
}

// Methods: uint16 pwm5[2]
// Getter: RovControlServoBData_GetRaw_pwm5
static uint16_t RovControlServoBData_GetRaw_pwm5(struct RovControlServoBData* value) {
    return value->pwm5;
}

// Setter: RovControlServoBData_SetRaw_pwm5
static void RovControlServoBData_SetRaw_pwm5(struct RovControlServoBData* structPtr, uint16_t value) {
    structPtr->pwm5 = value;
}

// Methods: uint16 pwm6[2]
// Getter: RovControlServoBData_GetRaw_pwm6
static uint16_t RovControlServoBData_GetRaw_pwm6(struct RovControlServoBData* value) {
    return value->pwm6;
}

// Setter: RovControlServoBData_SetRaw_pwm6
static void RovControlServoBData_SetRaw_pwm6(struct RovControlServoBData* structPtr, uint16_t value) {
    structPtr->pwm6 = value;
}

static const unsigned long long RovControlServoBData_Size = 6;
// Encoder: RovControlServoBData
static void RovControlServoBData_Encode(struct RovControlServoBData* structPtr, void* data) {
    // [0, 2) uint16 pwm4[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->pwm4))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->pwm4))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 pwm5[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->pwm5))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->pwm5))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 pwm6[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->pwm6))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->pwm6))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlServoBData
static bool RovControlServoBData_Decode(void* data, struct RovControlServoBData* structPtr) {
    // [0, 2) uint16 pwm4[2]
    (*(uint16_t*)(&(structPtr->pwm4))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm4))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 pwm5[2]
    (*(uint16_t*)(&(structPtr->pwm5))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm5))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 pwm6[2]
    (*(uint16_t*)(&(structPtr->pwm6))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm6))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlServoCData [6] {3 fields}
struct RovControlServoCData {
    // [0, 2) NormalField: uint16 pwm7[2]
    uint16_t pwm7;
    // [2, 4) NormalField: uint16 pwm8[2]
    uint16_t pwm8;
    // [4, 6) NormalField: uint16 pwm9[2]
    uint16_t pwm9;
};

// Methods: uint16 pwm7[2]
// Getter: RovControlServoCData_GetRaw_pwm7
static uint16_t RovControlServoCData_GetRaw_pwm7(struct RovControlServoCData* value) {
    return value->pwm7;
}

// Setter: RovControlServoCData_SetRaw_pwm7
static void RovControlServoCData_SetRaw_pwm7(struct RovControlServoCData* structPtr, uint16_t value) {
    structPtr->pwm7 = value;
}

// Methods: uint16 pwm8[2]
// Getter: RovControlServoCData_GetRaw_pwm8
static uint16_t RovControlServoCData_GetRaw_pwm8(struct RovControlServoCData* value) {
    return value->pwm8;
}

// Setter: RovControlServoCData_SetRaw_pwm8
static void RovControlServoCData_SetRaw_pwm8(struct RovControlServoCData* structPtr, uint16_t value) {
    structPtr->pwm8 = value;
}

// Methods: uint16 pwm9[2]
// Getter: RovControlServoCData_GetRaw_pwm9
static uint16_t RovControlServoCData_GetRaw_pwm9(struct RovControlServoCData* value) {
    return value->pwm9;
}

// Setter: RovControlServoCData_SetRaw_pwm9
static void RovControlServoCData_SetRaw_pwm9(struct RovControlServoCData* structPtr, uint16_t value) {
    structPtr->pwm9 = value;
}

static const unsigned long long RovControlServoCData_Size = 6;
// Encoder: RovControlServoCData
static void RovControlServoCData_Encode(struct RovControlServoCData* structPtr, void* data) {
    // [0, 2) uint16 pwm7[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->pwm7))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->pwm7))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 pwm8[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->pwm8))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->pwm8))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 pwm9[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->pwm9))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->pwm9))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlServoCData
static bool RovControlServoCData_Decode(void* data, struct RovControlServoCData* structPtr) {
    // [0, 2) uint16 pwm7[2]
    (*(uint16_t*)(&(structPtr->pwm7))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm7))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 pwm8[2]
    (*(uint16_t*)(&(structPtr->pwm8))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm8))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 pwm9[2]
    (*(uint16_t*)(&(structPtr->pwm9))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->pwm9))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovControlPostureData [6] {3 fields}
struct RovControlPostureData {
    // [0, 2) NormalField: uint16 forward_backward[2]
    uint16_t forward_backward;
    // [2, 4) NormalField: uint16 left_right[2]
    uint16_t left_right;
    // [4, 6) NormalField: uint16 up_down[2]
    uint16_t up_down;
};

// Methods: uint16 forward_backward[2]
// Getter: RovControlPostureData_GetRaw_forward_backward
static uint16_t RovControlPostureData_GetRaw_forward_backward(struct RovControlPostureData* value) {
    return value->forward_backward;
}

// Setter: RovControlPostureData_SetRaw_forward_backward
static void RovControlPostureData_SetRaw_forward_backward(struct RovControlPostureData* structPtr, uint16_t value) {
    structPtr->forward_backward = value;
}

// Getter: RovControlPostureData_Get_forward_backward_percent
static double RovControlPostureData_Get_forward_backward_percent(struct RovControlPostureData* value) {
    return ((((int32_t)(value->forward_backward) - 1530) / 10) / 0.45);
}

// Getter: RovControlPostureData_Get_forward_backward_percentInt
static int32_t RovControlPostureData_Get_forward_backward_percentInt(struct RovControlPostureData* value) {
    return (int32_t)((((((int32_t)(value->forward_backward) - 1530) / 10) / 0.45) + 0.5));
}

// Setter: RovControlPostureData_Set_forward_backward_percent
static void RovControlPostureData_Set_forward_backward_percent(struct RovControlPostureData* structPtr, double value) {
    structPtr->forward_backward = (uint16_t)((((value * 10) * 0.45) + 1530));
}

// Methods: uint16 left_right[2]
// Getter: RovControlPostureData_GetRaw_left_right
static uint16_t RovControlPostureData_GetRaw_left_right(struct RovControlPostureData* value) {
    return value->left_right;
}

// Setter: RovControlPostureData_SetRaw_left_right
static void RovControlPostureData_SetRaw_left_right(struct RovControlPostureData* structPtr, uint16_t value) {
    structPtr->left_right = value;
}

// Getter: RovControlPostureData_Get_left_right_percent
static double RovControlPostureData_Get_left_right_percent(struct RovControlPostureData* value) {
    return ((((int32_t)(value->left_right) - 1530) / 10) / 0.45);
}

// Getter: RovControlPostureData_Get_left_right_percentInt
static int32_t RovControlPostureData_Get_left_right_percentInt(struct RovControlPostureData* value) {
    return (int32_t)((((((int32_t)(value->left_right) - 1530) / 10) / 0.45) + 0.5));
}

// Setter: RovControlPostureData_Set_left_right_percent
static void RovControlPostureData_Set_left_right_percent(struct RovControlPostureData* structPtr, double value) {
    structPtr->left_right = (uint16_t)((((value * 10) * 0.45) + 1530));
}

// Methods: uint16 up_down[2]
// Getter: RovControlPostureData_GetRaw_up_down
static uint16_t RovControlPostureData_GetRaw_up_down(struct RovControlPostureData* value) {
    return value->up_down;
}

// Setter: RovControlPostureData_SetRaw_up_down
static void RovControlPostureData_SetRaw_up_down(struct RovControlPostureData* structPtr, uint16_t value) {
    structPtr->up_down = value;
}

// Getter: RovControlPostureData_Get_up_down_percent
static double RovControlPostureData_Get_up_down_percent(struct RovControlPostureData* value) {
    return ((((int32_t)(value->up_down) - 1530) / 10) / 0.45);
}

// Getter: RovControlPostureData_Get_up_down_percentInt
static int32_t RovControlPostureData_Get_up_down_percentInt(struct RovControlPostureData* value) {
    return (int32_t)((((((int32_t)(value->up_down) - 1530) / 10) / 0.45) + 0.5));
}

// Setter: RovControlPostureData_Set_up_down_percent
static void RovControlPostureData_Set_up_down_percent(struct RovControlPostureData* structPtr, double value) {
    structPtr->up_down = (uint16_t)((((value * 10) * 0.45) + 1530));
}

static const unsigned long long RovControlPostureData_Size = 6;
// Encoder: RovControlPostureData
static void RovControlPostureData_Encode(struct RovControlPostureData* structPtr, void* data) {
    // [0, 2) uint16 forward_backward[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->forward_backward))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->forward_backward))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 left_right[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->left_right))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->left_right))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 up_down[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->up_down))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->up_down))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovControlPostureData
static bool RovControlPostureData_Decode(void* data, struct RovControlPostureData* structPtr) {
    // [0, 2) uint16 forward_backward[2]
    (*(uint16_t*)(&(structPtr->forward_backward))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->forward_backward))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 left_right[2]
    (*(uint16_t*)(&(structPtr->left_right))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->left_right))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 up_down[2]
    (*(uint16_t*)(&(structPtr->up_down))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->up_down))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Enum: RovDeviceType [1] {6 values}
enum RovDeviceType {
    NONE = 0,
    POWER_CAB = 1,
    CONTROL_CAB = 2,
    COMM_CAB = 3,
    MAIN_CAB = 4,
    HOST = 5,
};

// Enum: RovlinkFrameType [1] {51 values}
enum RovlinkFrameType {
    SENSOR_NONE = 0,
    SENSOR_CAB_TEMP_HUMID_PRESS = 1,
    SENSOR_WATER_TEMP_DEPTH_PRESS = 2,
    SENSOR_ACCELERATION = 3,
    SENSOR_ANGULAR_VELOCITY = 4,
    SENSOR_EULER_ANGLE = 5,
    SENSOR_MAGNETIC_FIELD = 6,
    SENSOR_HEIGHT_SONAR = 7,
    SENSOR_DISTANCE_SONAR = 8,
    EXDATA_LEAKAGE = 16,
    EXDATA_KEEP_ALIVE = 17,
    CONTROL_PROPELLER_A = 33,
    CONTROL_PROPELLER_B = 34,
    CONTROL_PROPELLER_C = 35,
    CONTROL_PROPELLER_D = 36,
    CONTROL_LIGHT_A = 37,
    CONTROL_LIGHT_B = 38,
    CONTROL_PTZ = 39,
    CONTROL_SERVO_A = 40,
    CONTROL_SERVO_B = 41,
    CONTROL_SERVO_C = 42,
    CONTROL_POSTURE = 43,
    HOST_CAMARA = 49,
    ALGORITHM_PID_KP = 65,
    ALGORITHM_PID_KI = 66,
    ALGORITHM_PID_KD = 67,
    COMPONENT_PROPELLER = 81,
    COMPONENT_LIGHT = 82,
    COMPONENT_PTZ = 83,
    COMPONENT_SERVO_A = 84,
    COMPONENT_SERVO_B = 85,
    EXCOMPONENT_RELAY = 97,
    EXCOMPONENT_RESCUE = 98,
    MODE_MODE_A = 113,
    MODE_MODE_B = 114,
    EXCONTROL_CLAMP = 129,
    EXCONTROL_ARM_A = 130,
    EXCONTROL_ARM_B = 131,
    EXCONTROL_ARM_C = 132,
    BETTERY_VOLTAGE = 160,
    BETTERY_CURRENT_GAIN = 161,
    BETTERY_CURRENT_BIAS = 162,
    BETTERY_CURRENT = 163,
    BETTERY_REMAIN = 164,
    CURRENT_PROPELLER_A = 176,
    CURRENT_PROPELLER_B = 177,
    CURRENT_PROPELLER_C = 178,
    CURRENT_PROPELLER_D = 179,
    CURRENT_PTZ = 180,
    CURRENT_SERVO_A = 181,
    CURRENT_SERVO_B = 182,
};

// Struct: RovlinkFrame [8] {6 fields}
struct RovlinkFrame {
    // [0, 1) NormalField: RovlinkFrameType opcode[1]
    enum RovlinkFrameType opcode;
    // [1, 1#1) NormalField: bool sensor[#1]
    bool sensor;
    // [1#1, 1#2) NormalField: bool valid[#1]
    bool valid;
    // [1#2, 1#4) VoidField: void [#2]
    // [1#4, 2) NormalField: RovDeviceType device[#4]
    enum RovDeviceType device;
    // [2, 8) NormalField: uint8<6> payload[6]
    uint8_t payload[6];
};

// Methods: RovlinkFrameType opcode[1]
// Getter: RovlinkFrame_GetRaw_opcode
static enum RovlinkFrameType RovlinkFrame_GetRaw_opcode(struct RovlinkFrame* value) {
    return value->opcode;
}

// Setter: RovlinkFrame_SetRaw_opcode
static void RovlinkFrame_SetRaw_opcode(struct RovlinkFrame* structPtr, enum RovlinkFrameType value) {
    structPtr->opcode = value;
}

// Methods: bool sensor[#1]
// Getter: RovlinkFrame_GetRaw_sensor
static bool RovlinkFrame_GetRaw_sensor(struct RovlinkFrame* value) {
    return value->sensor;
}

// Setter: RovlinkFrame_SetRaw_sensor
static void RovlinkFrame_SetRaw_sensor(struct RovlinkFrame* structPtr, bool value) {
    structPtr->sensor = value;
}

// Methods: bool valid[#1]
// Getter: RovlinkFrame_GetRaw_valid
static bool RovlinkFrame_GetRaw_valid(struct RovlinkFrame* value) {
    return value->valid;
}

// Setter: RovlinkFrame_SetRaw_valid
static void RovlinkFrame_SetRaw_valid(struct RovlinkFrame* structPtr, bool value) {
    structPtr->valid = value;
}

// Methods: RovDeviceType device[#4]
// Getter: RovlinkFrame_GetRaw_device
static enum RovDeviceType RovlinkFrame_GetRaw_device(struct RovlinkFrame* value) {
    return value->device;
}

// Setter: RovlinkFrame_SetRaw_device
static void RovlinkFrame_SetRaw_device(struct RovlinkFrame* structPtr, enum RovDeviceType value) {
    structPtr->device = value;
}

static const unsigned long long RovlinkFrame_Size = 8;
// Encoder: RovlinkFrame
static void RovlinkFrame_Encode(struct RovlinkFrame* structPtr, void* data) {
    // [0, 1) RovlinkFrameType opcode[1]
    ((uint8_t*)data)[0] = (((((((*(uint8_t*)(&(structPtr->opcode))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [1, 1#1) bool sensor[#1]
    ((uint8_t*)data)[1] = (((((((*(uint8_t*)(&(structPtr->sensor))) >> 0)) & 0b1) >> 0) << 0) & 0b1);
    // [1#1, 1#2) bool valid[#1]
    ((uint8_t*)data)[1] |= (((((((*(uint8_t*)(&(structPtr->valid))) >> 0)) & 0b1) >> 0) << 1) & 0b10);
    // [1#2, 1#4) void [#2]
    ((uint8_t*)data)[1] |= (((((0) & 0b11) >> 0) << 2) & 0b1100);
    // [1#4, 2) RovDeviceType device[#4]
    ((uint8_t*)data)[1] |= (((((((*(uint8_t*)(&(structPtr->device))) >> 0)) & 0b1111) >> 0) << 4) & 0b11110000);
    // [2, 8) uint8<6> payload[6]
    ((uint8_t*)data)[2] = (((((((*(uint8_t*)(&((structPtr->payload)[0]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint8_t*)(&((structPtr->payload)[1]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[4] = (((((((*(uint8_t*)(&((structPtr->payload)[2]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint8_t*)(&((structPtr->payload)[3]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[6] = (((((((*(uint8_t*)(&((structPtr->payload)[4]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[7] = (((((((*(uint8_t*)(&((structPtr->payload)[5]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovlinkFrame
static bool RovlinkFrame_Decode(void* data, struct RovlinkFrame* structPtr) {
    // [0, 1) RovlinkFrameType opcode[1]
    (*(uint8_t*)(&(structPtr->opcode))) = ((uint8_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    // [1, 1#1) bool sensor[#1]
    (*(uint8_t*)(&(structPtr->sensor))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b1) >> 0)) << 0);
    // [1#1, 1#2) bool valid[#1]
    (*(uint8_t*)(&(structPtr->valid))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b10) >> 1)) << 0);
    // [1#2, 1#4) void [#2]
    // [1#4, 2) RovDeviceType device[#4]
    (*(uint8_t*)(&(structPtr->device))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b11110000) >> 4)) << 0);
    // [2, 8) uint8<6> payload[6]
    (*(uint8_t*)(&((structPtr->payload)[0]))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[1]))) = ((uint8_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[2]))) = ((uint8_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[3]))) = ((uint8_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[4]))) = ((uint8_t)(((((uint8_t*)data)[6] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[5]))) = ((uint8_t)(((((uint8_t*)data)[7] & 0b11111111) >> 0)) << 0);
    return true;
}

// Struct: RovlinkFullFrame [10] {9 fields}
struct RovlinkFullFrame {
    // [0, 1) NormalField: uint8 header[1]
    uint8_t header;
    // [virtual] EmbeddedField: RovlinkFrame [8]
    // [1, 2) NormalField: RovlinkFrameType opcode[1]
    enum RovlinkFrameType opcode;
    // [2, 2#1) NormalField: bool sensor[#1]
    bool sensor;
    // [2#1, 2#2) NormalField: bool valid[#1]
    bool valid;
    // [2#2, 2#4) VoidField: void [#2]
    // [2#4, 3) NormalField: RovDeviceType device[#4]
    enum RovDeviceType device;
    // [3, 9) NormalField: uint8<6> payload[6]
    uint8_t payload[6];
    // [9, 10) NormalField: uint8 crc[1]
    uint8_t crc;
};

// Methods: uint8 header[1]
// Getter: RovlinkFullFrame_GetRaw_header
static uint8_t RovlinkFullFrame_GetRaw_header(struct RovlinkFullFrame* value) {
    return value->header;
}

// Setter: RovlinkFullFrame_SetRaw_header
static void RovlinkFullFrame_SetRaw_header(struct RovlinkFullFrame* structPtr, uint8_t value) {
    structPtr->header = value;
}

// Methods: RovlinkFrameType opcode[1]
// Getter: RovlinkFullFrame_GetRaw_opcode
static enum RovlinkFrameType RovlinkFullFrame_GetRaw_opcode(struct RovlinkFullFrame* value) {
    return value->opcode;
}

// Setter: RovlinkFullFrame_SetRaw_opcode
static void RovlinkFullFrame_SetRaw_opcode(struct RovlinkFullFrame* structPtr, enum RovlinkFrameType value) {
    structPtr->opcode = value;
}

// Methods: bool sensor[#1]
// Getter: RovlinkFullFrame_GetRaw_sensor
static bool RovlinkFullFrame_GetRaw_sensor(struct RovlinkFullFrame* value) {
    return value->sensor;
}

// Setter: RovlinkFullFrame_SetRaw_sensor
static void RovlinkFullFrame_SetRaw_sensor(struct RovlinkFullFrame* structPtr, bool value) {
    structPtr->sensor = value;
}

// Methods: bool valid[#1]
// Getter: RovlinkFullFrame_GetRaw_valid
static bool RovlinkFullFrame_GetRaw_valid(struct RovlinkFullFrame* value) {
    return value->valid;
}

// Setter: RovlinkFullFrame_SetRaw_valid
static void RovlinkFullFrame_SetRaw_valid(struct RovlinkFullFrame* structPtr, bool value) {
    structPtr->valid = value;
}

// Methods: RovDeviceType device[#4]
// Getter: RovlinkFullFrame_GetRaw_device
static enum RovDeviceType RovlinkFullFrame_GetRaw_device(struct RovlinkFullFrame* value) {
    return value->device;
}

// Setter: RovlinkFullFrame_SetRaw_device
static void RovlinkFullFrame_SetRaw_device(struct RovlinkFullFrame* structPtr, enum RovDeviceType value) {
    structPtr->device = value;
}

// Methods: uint8 crc[1]
// Getter: RovlinkFullFrame_GetRaw_crc
static uint8_t RovlinkFullFrame_GetRaw_crc(struct RovlinkFullFrame* value) {
    return value->crc;
}

// Setter: RovlinkFullFrame_SetRaw_crc
static void RovlinkFullFrame_SetRaw_crc(struct RovlinkFullFrame* structPtr, uint8_t value) {
    structPtr->crc = value;
}

static const unsigned long long RovlinkFullFrame_Size = 10;
// Encoder: RovlinkFullFrame
static void RovlinkFullFrame_Encode(struct RovlinkFullFrame* structPtr, void* data) {
    // [0, 1) uint8 header[1]
    ((uint8_t*)data)[0] = (((((((*(uint8_t*)(&(structPtr->header))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [1, 2) RovlinkFrameType opcode[1]
    ((uint8_t*)data)[1] = (((((((*(uint8_t*)(&(structPtr->opcode))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 2#1) bool sensor[#1]
    ((uint8_t*)data)[2] = (((((((*(uint8_t*)(&(structPtr->sensor))) >> 0)) & 0b1) >> 0) << 0) & 0b1);
    // [2#1, 2#2) bool valid[#1]
    ((uint8_t*)data)[2] |= (((((((*(uint8_t*)(&(structPtr->valid))) >> 0)) & 0b1) >> 0) << 1) & 0b10);
    // [2#2, 2#4) void [#2]
    ((uint8_t*)data)[2] |= (((((0) & 0b11) >> 0) << 2) & 0b1100);
    // [2#4, 3) RovDeviceType device[#4]
    ((uint8_t*)data)[2] |= (((((((*(uint8_t*)(&(structPtr->device))) >> 0)) & 0b1111) >> 0) << 4) & 0b11110000);
    // [3, 9) uint8<6> payload[6]
    ((uint8_t*)data)[3] = (((((((*(uint8_t*)(&((structPtr->payload)[0]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[4] = (((((((*(uint8_t*)(&((structPtr->payload)[1]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint8_t*)(&((structPtr->payload)[2]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[6] = (((((((*(uint8_t*)(&((structPtr->payload)[3]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[7] = (((((((*(uint8_t*)(&((structPtr->payload)[4]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[8] = (((((((*(uint8_t*)(&((structPtr->payload)[5]))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [9, 10) uint8 crc[1]
    ((uint8_t*)data)[9] = (((((((*(uint8_t*)(&(structPtr->crc))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovlinkFullFrame
static bool RovlinkFullFrame_Decode(void* data, struct RovlinkFullFrame* structPtr) {
    // [0, 1) uint8 header[1]
    (*(uint8_t*)(&(structPtr->header))) = ((uint8_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    // [1, 2) RovlinkFrameType opcode[1]
    (*(uint8_t*)(&(structPtr->opcode))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 0);
    // [2, 2#1) bool sensor[#1]
    (*(uint8_t*)(&(structPtr->sensor))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b1) >> 0)) << 0);
    // [2#1, 2#2) bool valid[#1]
    (*(uint8_t*)(&(structPtr->valid))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b10) >> 1)) << 0);
    // [2#2, 2#4) void [#2]
    // [2#4, 3) RovDeviceType device[#4]
    (*(uint8_t*)(&(structPtr->device))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b11110000) >> 4)) << 0);
    // [3, 9) uint8<6> payload[6]
    (*(uint8_t*)(&((structPtr->payload)[0]))) = ((uint8_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[1]))) = ((uint8_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[2]))) = ((uint8_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[3]))) = ((uint8_t)(((((uint8_t*)data)[6] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[4]))) = ((uint8_t)(((((uint8_t*)data)[7] & 0b11111111) >> 0)) << 0);
    (*(uint8_t*)(&((structPtr->payload)[5]))) = ((uint8_t)(((((uint8_t*)data)[8] & 0b11111111) >> 0)) << 0);
    // [9, 10) uint8 crc[1]
    (*(uint8_t*)(&(structPtr->crc))) = ((uint8_t)(((((uint8_t*)data)[9] & 0b11111111) >> 0)) << 0);
    return true;
}

// Struct: RovExcomponentRelayData [6] {6 fields}
struct RovExcomponentRelayData {
    // [0, 1) NormalField: bool lazer[1]
    bool lazer;
    // [1, 2) NormalField: bool clamp[1]
    bool clamp;
    // [2, 3) NormalField: bool arm[1]
    bool arm;
    // [3, 4) NormalField: bool sonar[1]
    bool sonar;
    // [4, 5) NormalField: bool propeller[1]
    bool propeller;
    // [5, 6) NormalField: bool ptz[1]
    bool ptz;
};

// Methods: bool lazer[1]
// Getter: RovExcomponentRelayData_GetRaw_lazer
static bool RovExcomponentRelayData_GetRaw_lazer(struct RovExcomponentRelayData* value) {
    return value->lazer;
}

// Setter: RovExcomponentRelayData_SetRaw_lazer
static void RovExcomponentRelayData_SetRaw_lazer(struct RovExcomponentRelayData* structPtr, bool value) {
    structPtr->lazer = value;
}

// Methods: bool clamp[1]
// Getter: RovExcomponentRelayData_GetRaw_clamp
static bool RovExcomponentRelayData_GetRaw_clamp(struct RovExcomponentRelayData* value) {
    return value->clamp;
}

// Setter: RovExcomponentRelayData_SetRaw_clamp
static void RovExcomponentRelayData_SetRaw_clamp(struct RovExcomponentRelayData* structPtr, bool value) {
    structPtr->clamp = value;
}

// Methods: bool arm[1]
// Getter: RovExcomponentRelayData_GetRaw_arm
static bool RovExcomponentRelayData_GetRaw_arm(struct RovExcomponentRelayData* value) {
    return value->arm;
}

// Setter: RovExcomponentRelayData_SetRaw_arm
static void RovExcomponentRelayData_SetRaw_arm(struct RovExcomponentRelayData* structPtr, bool value) {
    structPtr->arm = value;
}

// Methods: bool sonar[1]
// Getter: RovExcomponentRelayData_GetRaw_sonar
static bool RovExcomponentRelayData_GetRaw_sonar(struct RovExcomponentRelayData* value) {
    return value->sonar;
}

// Setter: RovExcomponentRelayData_SetRaw_sonar
static void RovExcomponentRelayData_SetRaw_sonar(struct RovExcomponentRelayData* structPtr, bool value) {
    structPtr->sonar = value;
}

// Methods: bool propeller[1]
// Getter: RovExcomponentRelayData_GetRaw_propeller
static bool RovExcomponentRelayData_GetRaw_propeller(struct RovExcomponentRelayData* value) {
    return value->propeller;
}

// Setter: RovExcomponentRelayData_SetRaw_propeller
static void RovExcomponentRelayData_SetRaw_propeller(struct RovExcomponentRelayData* structPtr, bool value) {
    structPtr->propeller = value;
}

// Methods: bool ptz[1]
// Getter: RovExcomponentRelayData_GetRaw_ptz
static bool RovExcomponentRelayData_GetRaw_ptz(struct RovExcomponentRelayData* value) {
    return value->ptz;
}

// Setter: RovExcomponentRelayData_SetRaw_ptz
static void RovExcomponentRelayData_SetRaw_ptz(struct RovExcomponentRelayData* structPtr, bool value) {
    structPtr->ptz = value;
}

static const unsigned long long RovExcomponentRelayData_Size = 6;
// Encoder: RovExcomponentRelayData
static void RovExcomponentRelayData_Encode(struct RovExcomponentRelayData* structPtr, void* data) {
    // [0, 1) bool lazer[1]
    ((uint8_t*)data)[0] = (((((((*(uint8_t*)(&(structPtr->lazer))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [1, 2) bool clamp[1]
    ((uint8_t*)data)[1] = (((((((*(uint8_t*)(&(structPtr->clamp))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 3) bool arm[1]
    ((uint8_t*)data)[2] = (((((((*(uint8_t*)(&(structPtr->arm))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [3, 4) bool sonar[1]
    ((uint8_t*)data)[3] = (((((((*(uint8_t*)(&(structPtr->sonar))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 5) bool propeller[1]
    ((uint8_t*)data)[4] = (((((((*(uint8_t*)(&(structPtr->propeller))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [5, 6) bool ptz[1]
    ((uint8_t*)data)[5] = (((((((*(uint8_t*)(&(structPtr->ptz))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovExcomponentRelayData
static bool RovExcomponentRelayData_Decode(void* data, struct RovExcomponentRelayData* structPtr) {
    // [0, 1) bool lazer[1]
    (*(uint8_t*)(&(structPtr->lazer))) = ((uint8_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    // [1, 2) bool clamp[1]
    (*(uint8_t*)(&(structPtr->clamp))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 0);
    // [2, 3) bool arm[1]
    (*(uint8_t*)(&(structPtr->arm))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    // [3, 4) bool sonar[1]
    (*(uint8_t*)(&(structPtr->sonar))) = ((uint8_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 0);
    // [4, 5) bool propeller[1]
    (*(uint8_t*)(&(structPtr->propeller))) = ((uint8_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    // [5, 6) bool ptz[1]
    (*(uint8_t*)(&(structPtr->ptz))) = ((uint8_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 0);
    return true;
}

// Struct: RovExcomponentRescueData [6] {6 fields}
struct RovExcomponentRescueData {
    // [0, 1) NormalField: uint8 stretch[1]
    uint8_t stretch;
    // [1, 2) NormalField: uint8 left_servo[1]
    uint8_t left_servo;
    // [2, 3) NormalField: uint8 right_servo[1]
    uint8_t right_servo;
    // [3, 4) NormalField: uint8 clamp[1]
    uint8_t clamp;
    // [4, 5) NormalField: uint8 turn_servo[1]
    uint8_t turn_servo;
    // [5, 6) NormalField: uint8 solution[1]
    uint8_t solution;
};

// Methods: uint8 stretch[1]
// Getter: RovExcomponentRescueData_GetRaw_stretch
static uint8_t RovExcomponentRescueData_GetRaw_stretch(struct RovExcomponentRescueData* value) {
    return value->stretch;
}

// Setter: RovExcomponentRescueData_SetRaw_stretch
static void RovExcomponentRescueData_SetRaw_stretch(struct RovExcomponentRescueData* structPtr, uint8_t value) {
    structPtr->stretch = value;
}

// Methods: uint8 left_servo[1]
// Getter: RovExcomponentRescueData_GetRaw_left_servo
static uint8_t RovExcomponentRescueData_GetRaw_left_servo(struct RovExcomponentRescueData* value) {
    return value->left_servo;
}

// Setter: RovExcomponentRescueData_SetRaw_left_servo
static void RovExcomponentRescueData_SetRaw_left_servo(struct RovExcomponentRescueData* structPtr, uint8_t value) {
    structPtr->left_servo = value;
}

// Methods: uint8 right_servo[1]
// Getter: RovExcomponentRescueData_GetRaw_right_servo
static uint8_t RovExcomponentRescueData_GetRaw_right_servo(struct RovExcomponentRescueData* value) {
    return value->right_servo;
}

// Setter: RovExcomponentRescueData_SetRaw_right_servo
static void RovExcomponentRescueData_SetRaw_right_servo(struct RovExcomponentRescueData* structPtr, uint8_t value) {
    structPtr->right_servo = value;
}

// Methods: uint8 clamp[1]
// Getter: RovExcomponentRescueData_GetRaw_clamp
static uint8_t RovExcomponentRescueData_GetRaw_clamp(struct RovExcomponentRescueData* value) {
    return value->clamp;
}

// Setter: RovExcomponentRescueData_SetRaw_clamp
static void RovExcomponentRescueData_SetRaw_clamp(struct RovExcomponentRescueData* structPtr, uint8_t value) {
    structPtr->clamp = value;
}

// Methods: uint8 turn_servo[1]
// Getter: RovExcomponentRescueData_GetRaw_turn_servo
static uint8_t RovExcomponentRescueData_GetRaw_turn_servo(struct RovExcomponentRescueData* value) {
    return value->turn_servo;
}

// Setter: RovExcomponentRescueData_SetRaw_turn_servo
static void RovExcomponentRescueData_SetRaw_turn_servo(struct RovExcomponentRescueData* structPtr, uint8_t value) {
    structPtr->turn_servo = value;
}

// Methods: uint8 solution[1]
// Getter: RovExcomponentRescueData_GetRaw_solution
static uint8_t RovExcomponentRescueData_GetRaw_solution(struct RovExcomponentRescueData* value) {
    return value->solution;
}

// Setter: RovExcomponentRescueData_SetRaw_solution
static void RovExcomponentRescueData_SetRaw_solution(struct RovExcomponentRescueData* structPtr, uint8_t value) {
    structPtr->solution = value;
}

static const unsigned long long RovExcomponentRescueData_Size = 6;
// Encoder: RovExcomponentRescueData
static void RovExcomponentRescueData_Encode(struct RovExcomponentRescueData* structPtr, void* data) {
    // [0, 1) uint8 stretch[1]
    ((uint8_t*)data)[0] = (((((((*(uint8_t*)(&(structPtr->stretch))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [1, 2) uint8 left_servo[1]
    ((uint8_t*)data)[1] = (((((((*(uint8_t*)(&(structPtr->left_servo))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 3) uint8 right_servo[1]
    ((uint8_t*)data)[2] = (((((((*(uint8_t*)(&(structPtr->right_servo))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [3, 4) uint8 clamp[1]
    ((uint8_t*)data)[3] = (((((((*(uint8_t*)(&(structPtr->clamp))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 5) uint8 turn_servo[1]
    ((uint8_t*)data)[4] = (((((((*(uint8_t*)(&(structPtr->turn_servo))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [5, 6) uint8 solution[1]
    ((uint8_t*)data)[5] = (((((((*(uint8_t*)(&(structPtr->solution))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovExcomponentRescueData
static bool RovExcomponentRescueData_Decode(void* data, struct RovExcomponentRescueData* structPtr) {
    // [0, 1) uint8 stretch[1]
    (*(uint8_t*)(&(structPtr->stretch))) = ((uint8_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    // [1, 2) uint8 left_servo[1]
    (*(uint8_t*)(&(structPtr->left_servo))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 0);
    // [2, 3) uint8 right_servo[1]
    (*(uint8_t*)(&(structPtr->right_servo))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    // [3, 4) uint8 clamp[1]
    (*(uint8_t*)(&(structPtr->clamp))) = ((uint8_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 0);
    // [4, 5) uint8 turn_servo[1]
    (*(uint8_t*)(&(structPtr->turn_servo))) = ((uint8_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    // [5, 6) uint8 solution[1]
    (*(uint8_t*)(&(structPtr->solution))) = ((uint8_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 0);
    return true;
}

// Struct: RovExcontrolClampData [6] {3 fields}
struct RovExcontrolClampData {
    // [0, 2) NormalField: int16 clamp[2]
    int16_t clamp;
    // [2, 4) NormalField: int16 wrist[2]
    int16_t wrist;
    // [4, 6) VoidField: void [2]
};

// Methods: int16 clamp[2]
// Getter: RovExcontrolClampData_GetRaw_clamp
static int16_t RovExcontrolClampData_GetRaw_clamp(struct RovExcontrolClampData* value) {
    return value->clamp;
}

// Setter: RovExcontrolClampData_SetRaw_clamp
static void RovExcontrolClampData_SetRaw_clamp(struct RovExcontrolClampData* structPtr, int16_t value) {
    structPtr->clamp = value;
}

// Methods: int16 wrist[2]
// Getter: RovExcontrolClampData_GetRaw_wrist
static int16_t RovExcontrolClampData_GetRaw_wrist(struct RovExcontrolClampData* value) {
    return value->wrist;
}

// Setter: RovExcontrolClampData_SetRaw_wrist
static void RovExcontrolClampData_SetRaw_wrist(struct RovExcontrolClampData* structPtr, int16_t value) {
    structPtr->wrist = value;
}

// Getter: RovExcontrolClampData_Get_wrist_percent
static double RovExcontrolClampData_Get_wrist_percent(struct RovExcontrolClampData* value) {
    return ((value->wrist / 3000) * 100);
}

// Getter: RovExcontrolClampData_Get_wrist_percentInt
static int32_t RovExcontrolClampData_Get_wrist_percentInt(struct RovExcontrolClampData* value) {
    return (int32_t)(((value->wrist / 3000) * 100));
}

// Setter: RovExcontrolClampData_Set_wrist_percent
static void RovExcontrolClampData_Set_wrist_percent(struct RovExcontrolClampData* structPtr, double value) {
    structPtr->wrist = (((value > -0.5) && (value < 0.5)) ? 0 : value);
}

static const unsigned long long RovExcontrolClampData_Size = 6;
// Encoder: RovExcontrolClampData
static void RovExcontrolClampData_Encode(struct RovExcontrolClampData* structPtr, void* data) {
    // [0, 2) int16 clamp[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->clamp))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->clamp))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) int16 wrist[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->wrist))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->wrist))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) void [2]
    ((uint8_t*)data)[4] = (((((0) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((0) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovExcontrolClampData
static bool RovExcontrolClampData_Decode(void* data, struct RovExcontrolClampData* structPtr) {
    // [0, 2) int16 clamp[2]
    (*(uint16_t*)(&(structPtr->clamp))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->clamp))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) int16 wrist[2]
    (*(uint16_t*)(&(structPtr->wrist))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->wrist))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) void [2]
    return true;
}

// Struct: RovExcontrolArmAData [6] {3 fields}
struct RovExcontrolArmAData {
    // [0, 2) NormalField: uint16 a1[2]
    uint16_t a1;
    // [2, 4) NormalField: uint16 a2[2]
    uint16_t a2;
    // [4, 6) NormalField: uint16 a3[2]
    uint16_t a3;
};

// Methods: uint16 a1[2]
// Getter: RovExcontrolArmAData_GetRaw_a1
static uint16_t RovExcontrolArmAData_GetRaw_a1(struct RovExcontrolArmAData* value) {
    return value->a1;
}

// Setter: RovExcontrolArmAData_SetRaw_a1
static void RovExcontrolArmAData_SetRaw_a1(struct RovExcontrolArmAData* structPtr, uint16_t value) {
    structPtr->a1 = value;
}

// Methods: uint16 a2[2]
// Getter: RovExcontrolArmAData_GetRaw_a2
static uint16_t RovExcontrolArmAData_GetRaw_a2(struct RovExcontrolArmAData* value) {
    return value->a2;
}

// Setter: RovExcontrolArmAData_SetRaw_a2
static void RovExcontrolArmAData_SetRaw_a2(struct RovExcontrolArmAData* structPtr, uint16_t value) {
    structPtr->a2 = value;
}

// Methods: uint16 a3[2]
// Getter: RovExcontrolArmAData_GetRaw_a3
static uint16_t RovExcontrolArmAData_GetRaw_a3(struct RovExcontrolArmAData* value) {
    return value->a3;
}

// Setter: RovExcontrolArmAData_SetRaw_a3
static void RovExcontrolArmAData_SetRaw_a3(struct RovExcontrolArmAData* structPtr, uint16_t value) {
    structPtr->a3 = value;
}

static const unsigned long long RovExcontrolArmAData_Size = 6;
// Encoder: RovExcontrolArmAData
static void RovExcontrolArmAData_Encode(struct RovExcontrolArmAData* structPtr, void* data) {
    // [0, 2) uint16 a1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->a1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->a1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 a2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->a2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->a2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 a3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->a3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->a3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovExcontrolArmAData
static bool RovExcontrolArmAData_Decode(void* data, struct RovExcontrolArmAData* structPtr) {
    // [0, 2) uint16 a1[2]
    (*(uint16_t*)(&(structPtr->a1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->a1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 a2[2]
    (*(uint16_t*)(&(structPtr->a2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->a2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 a3[2]
    (*(uint16_t*)(&(structPtr->a3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->a3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovExcontrolArmBData [6] {3 fields}
struct RovExcontrolArmBData {
    // [0, 2) NormalField: uint16 b1[2]
    uint16_t b1;
    // [2, 4) NormalField: uint16 b2[2]
    uint16_t b2;
    // [4, 6) NormalField: uint16 b3[2]
    uint16_t b3;
};

// Methods: uint16 b1[2]
// Getter: RovExcontrolArmBData_GetRaw_b1
static uint16_t RovExcontrolArmBData_GetRaw_b1(struct RovExcontrolArmBData* value) {
    return value->b1;
}

// Setter: RovExcontrolArmBData_SetRaw_b1
static void RovExcontrolArmBData_SetRaw_b1(struct RovExcontrolArmBData* structPtr, uint16_t value) {
    structPtr->b1 = value;
}

// Methods: uint16 b2[2]
// Getter: RovExcontrolArmBData_GetRaw_b2
static uint16_t RovExcontrolArmBData_GetRaw_b2(struct RovExcontrolArmBData* value) {
    return value->b2;
}

// Setter: RovExcontrolArmBData_SetRaw_b2
static void RovExcontrolArmBData_SetRaw_b2(struct RovExcontrolArmBData* structPtr, uint16_t value) {
    structPtr->b2 = value;
}

// Methods: uint16 b3[2]
// Getter: RovExcontrolArmBData_GetRaw_b3
static uint16_t RovExcontrolArmBData_GetRaw_b3(struct RovExcontrolArmBData* value) {
    return value->b3;
}

// Setter: RovExcontrolArmBData_SetRaw_b3
static void RovExcontrolArmBData_SetRaw_b3(struct RovExcontrolArmBData* structPtr, uint16_t value) {
    structPtr->b3 = value;
}

static const unsigned long long RovExcontrolArmBData_Size = 6;
// Encoder: RovExcontrolArmBData
static void RovExcontrolArmBData_Encode(struct RovExcontrolArmBData* structPtr, void* data) {
    // [0, 2) uint16 b1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->b1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->b1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 b2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->b2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->b2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 b3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->b3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->b3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovExcontrolArmBData
static bool RovExcontrolArmBData_Decode(void* data, struct RovExcontrolArmBData* structPtr) {
    // [0, 2) uint16 b1[2]
    (*(uint16_t*)(&(structPtr->b1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->b1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 b2[2]
    (*(uint16_t*)(&(structPtr->b2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->b2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 b3[2]
    (*(uint16_t*)(&(structPtr->b3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->b3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovExcontrolArmCData [6] {3 fields}
struct RovExcontrolArmCData {
    // [0, 2) NormalField: uint16 c1[2]
    uint16_t c1;
    // [2, 4) NormalField: uint16 c2[2]
    uint16_t c2;
    // [4, 6) NormalField: uint16 c3[2]
    uint16_t c3;
};

// Methods: uint16 c1[2]
// Getter: RovExcontrolArmCData_GetRaw_c1
static uint16_t RovExcontrolArmCData_GetRaw_c1(struct RovExcontrolArmCData* value) {
    return value->c1;
}

// Setter: RovExcontrolArmCData_SetRaw_c1
static void RovExcontrolArmCData_SetRaw_c1(struct RovExcontrolArmCData* structPtr, uint16_t value) {
    structPtr->c1 = value;
}

// Methods: uint16 c2[2]
// Getter: RovExcontrolArmCData_GetRaw_c2
static uint16_t RovExcontrolArmCData_GetRaw_c2(struct RovExcontrolArmCData* value) {
    return value->c2;
}

// Setter: RovExcontrolArmCData_SetRaw_c2
static void RovExcontrolArmCData_SetRaw_c2(struct RovExcontrolArmCData* structPtr, uint16_t value) {
    structPtr->c2 = value;
}

// Methods: uint16 c3[2]
// Getter: RovExcontrolArmCData_GetRaw_c3
static uint16_t RovExcontrolArmCData_GetRaw_c3(struct RovExcontrolArmCData* value) {
    return value->c3;
}

// Setter: RovExcontrolArmCData_SetRaw_c3
static void RovExcontrolArmCData_SetRaw_c3(struct RovExcontrolArmCData* structPtr, uint16_t value) {
    structPtr->c3 = value;
}

static const unsigned long long RovExcontrolArmCData_Size = 6;
// Encoder: RovExcontrolArmCData
static void RovExcontrolArmCData_Encode(struct RovExcontrolArmCData* structPtr, void* data) {
    // [0, 2) uint16 c1[2]
    ((uint8_t*)data)[0] = (((((((*(uint16_t*)(&(structPtr->c1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint16_t*)(&(structPtr->c1))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 4) uint16 c2[2]
    ((uint8_t*)data)[2] = (((((((*(uint16_t*)(&(structPtr->c2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint16_t*)(&(structPtr->c2))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) uint16 c3[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->c3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->c3))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovExcontrolArmCData
static bool RovExcontrolArmCData_Decode(void* data, struct RovExcontrolArmCData* structPtr) {
    // [0, 2) uint16 c1[2]
    (*(uint16_t*)(&(structPtr->c1))) = ((uint16_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->c1))) |= ((uint16_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    // [2, 4) uint16 c2[2]
    (*(uint16_t*)(&(structPtr->c2))) = ((uint16_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->c2))) |= ((uint16_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 8);
    // [4, 6) uint16 c3[2]
    (*(uint16_t*)(&(structPtr->c3))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->c3))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Struct: RovExdataLeakageData [6] {1 fields}
struct RovExdataLeakageData {
    // [0, 6) NormalField: uint64 leakage[6]
    uint64_t leakage;
};

// Methods: uint64 leakage[6]
// Getter: RovExdataLeakageData_GetRaw_leakage
static uint64_t RovExdataLeakageData_GetRaw_leakage(struct RovExdataLeakageData* value) {
    return value->leakage;
}

// Setter: RovExdataLeakageData_SetRaw_leakage
static void RovExdataLeakageData_SetRaw_leakage(struct RovExdataLeakageData* structPtr, uint64_t value) {
    structPtr->leakage = value;
}

static const unsigned long long RovExdataLeakageData_Size = 6;
// Encoder: RovExdataLeakageData
static void RovExdataLeakageData_Encode(struct RovExdataLeakageData* structPtr, void* data) {
    // [0, 6) uint64 leakage[6]
    ((uint8_t*)data)[0] = (((((((*(uint64_t*)(&(structPtr->leakage))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint64_t*)(&(structPtr->leakage))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[2] = (((((((*(uint64_t*)(&(structPtr->leakage))) >> 16)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint64_t*)(&(structPtr->leakage))) >> 24)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[4] = (((((((*(uint64_t*)(&(structPtr->leakage))) >> 32)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint64_t*)(&(structPtr->leakage))) >> 40)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovExdataLeakageData
static bool RovExdataLeakageData_Decode(void* data, struct RovExdataLeakageData* structPtr) {
    // [0, 6) uint64 leakage[6]
    (*(uint64_t*)(&(structPtr->leakage))) = ((uint64_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint64_t*)(&(structPtr->leakage))) |= ((uint64_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    (*(uint64_t*)(&(structPtr->leakage))) |= ((uint64_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 16);
    (*(uint64_t*)(&(structPtr->leakage))) |= ((uint64_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 24);
    (*(uint64_t*)(&(structPtr->leakage))) |= ((uint64_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 32);
    (*(uint64_t*)(&(structPtr->leakage))) |= ((uint64_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 40);
    structPtr->leakage = ((int64_t)((structPtr->leakage) << 16) >> 16);
    return true;
}

// Enum: RovExdataKeepAliveStatus [2] {2 values}
enum RovExdataKeepAliveStatus {
    HEALTHY = 0,
    WATCHDOG_TIMEOUT = 1,
};

// Struct: RovExdataKeepAliveData [6] {2 fields}
struct RovExdataKeepAliveData {
    // [0, 4) NormalField: uint32 timestamp[4]
    uint32_t timestamp;
    // [4, 6) NormalField: RovExdataKeepAliveStatus status[2]
    enum RovExdataKeepAliveStatus status;
};

// Methods: uint32 timestamp[4]
// Getter: RovExdataKeepAliveData_GetRaw_timestamp
static uint32_t RovExdataKeepAliveData_GetRaw_timestamp(struct RovExdataKeepAliveData* value) {
    return value->timestamp;
}

// Setter: RovExdataKeepAliveData_SetRaw_timestamp
static void RovExdataKeepAliveData_SetRaw_timestamp(struct RovExdataKeepAliveData* structPtr, uint32_t value) {
    structPtr->timestamp = value;
}

// Methods: RovExdataKeepAliveStatus status[2]
// Getter: RovExdataKeepAliveData_GetRaw_status
static enum RovExdataKeepAliveStatus RovExdataKeepAliveData_GetRaw_status(struct RovExdataKeepAliveData* value) {
    return value->status;
}

// Setter: RovExdataKeepAliveData_SetRaw_status
static void RovExdataKeepAliveData_SetRaw_status(struct RovExdataKeepAliveData* structPtr, enum RovExdataKeepAliveStatus value) {
    structPtr->status = value;
}

static const unsigned long long RovExdataKeepAliveData_Size = 6;
// Encoder: RovExdataKeepAliveData
static void RovExdataKeepAliveData_Encode(struct RovExdataKeepAliveData* structPtr, void* data) {
    // [0, 4) uint32 timestamp[4]
    ((uint8_t*)data)[0] = (((((((*(uint32_t*)(&(structPtr->timestamp))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[1] = (((((((*(uint32_t*)(&(structPtr->timestamp))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[2] = (((((((*(uint32_t*)(&(structPtr->timestamp))) >> 16)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[3] = (((((((*(uint32_t*)(&(structPtr->timestamp))) >> 24)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 6) RovExdataKeepAliveStatus status[2]
    ((uint8_t*)data)[4] = (((((((*(uint16_t*)(&(structPtr->status))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    ((uint8_t*)data)[5] = (((((((*(uint16_t*)(&(structPtr->status))) >> 8)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovExdataKeepAliveData
static bool RovExdataKeepAliveData_Decode(void* data, struct RovExdataKeepAliveData* structPtr) {
    // [0, 4) uint32 timestamp[4]
    (*(uint32_t*)(&(structPtr->timestamp))) = ((uint32_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    (*(uint32_t*)(&(structPtr->timestamp))) |= ((uint32_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 8);
    (*(uint32_t*)(&(structPtr->timestamp))) |= ((uint32_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 16);
    (*(uint32_t*)(&(structPtr->timestamp))) |= ((uint32_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 24);
    // [4, 6) RovExdataKeepAliveStatus status[2]
    (*(uint16_t*)(&(structPtr->status))) = ((uint16_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    (*(uint16_t*)(&(structPtr->status))) |= ((uint16_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 8);
    return true;
}

// Enum: RovCamaraType [1] {3 values}
enum RovCamaraType {
    NO_CAM = 0,
    FRONT_CAM = 1,
    BACK_CAM = 2,
};

// Struct: RovHostCamaraData [6] {6 fields}
struct RovHostCamaraData {
    // [0, 1) NormalField: RovCamaraType cam1[1]
    enum RovCamaraType cam1;
    // [1, 2) NormalField: RovCamaraType cam2[1]
    enum RovCamaraType cam2;
    // [2, 3) NormalField: RovCamaraType cam3[1]
    enum RovCamaraType cam3;
    // [3, 4) NormalField: RovCamaraType cam4[1]
    enum RovCamaraType cam4;
    // [4, 5) NormalField: RovCamaraType cam5[1]
    enum RovCamaraType cam5;
    // [5, 6) NormalField: RovCamaraType cam6[1]
    enum RovCamaraType cam6;
};

// Methods: RovCamaraType cam1[1]
// Getter: RovHostCamaraData_GetRaw_cam1
static enum RovCamaraType RovHostCamaraData_GetRaw_cam1(struct RovHostCamaraData* value) {
    return value->cam1;
}

// Setter: RovHostCamaraData_SetRaw_cam1
static void RovHostCamaraData_SetRaw_cam1(struct RovHostCamaraData* structPtr, enum RovCamaraType value) {
    structPtr->cam1 = value;
}

// Methods: RovCamaraType cam2[1]
// Getter: RovHostCamaraData_GetRaw_cam2
static enum RovCamaraType RovHostCamaraData_GetRaw_cam2(struct RovHostCamaraData* value) {
    return value->cam2;
}

// Setter: RovHostCamaraData_SetRaw_cam2
static void RovHostCamaraData_SetRaw_cam2(struct RovHostCamaraData* structPtr, enum RovCamaraType value) {
    structPtr->cam2 = value;
}

// Methods: RovCamaraType cam3[1]
// Getter: RovHostCamaraData_GetRaw_cam3
static enum RovCamaraType RovHostCamaraData_GetRaw_cam3(struct RovHostCamaraData* value) {
    return value->cam3;
}

// Setter: RovHostCamaraData_SetRaw_cam3
static void RovHostCamaraData_SetRaw_cam3(struct RovHostCamaraData* structPtr, enum RovCamaraType value) {
    structPtr->cam3 = value;
}

// Methods: RovCamaraType cam4[1]
// Getter: RovHostCamaraData_GetRaw_cam4
static enum RovCamaraType RovHostCamaraData_GetRaw_cam4(struct RovHostCamaraData* value) {
    return value->cam4;
}

// Setter: RovHostCamaraData_SetRaw_cam4
static void RovHostCamaraData_SetRaw_cam4(struct RovHostCamaraData* structPtr, enum RovCamaraType value) {
    structPtr->cam4 = value;
}

// Methods: RovCamaraType cam5[1]
// Getter: RovHostCamaraData_GetRaw_cam5
static enum RovCamaraType RovHostCamaraData_GetRaw_cam5(struct RovHostCamaraData* value) {
    return value->cam5;
}

// Setter: RovHostCamaraData_SetRaw_cam5
static void RovHostCamaraData_SetRaw_cam5(struct RovHostCamaraData* structPtr, enum RovCamaraType value) {
    structPtr->cam5 = value;
}

// Methods: RovCamaraType cam6[1]
// Getter: RovHostCamaraData_GetRaw_cam6
static enum RovCamaraType RovHostCamaraData_GetRaw_cam6(struct RovHostCamaraData* value) {
    return value->cam6;
}

// Setter: RovHostCamaraData_SetRaw_cam6
static void RovHostCamaraData_SetRaw_cam6(struct RovHostCamaraData* structPtr, enum RovCamaraType value) {
    structPtr->cam6 = value;
}

static const unsigned long long RovHostCamaraData_Size = 6;
// Encoder: RovHostCamaraData
static void RovHostCamaraData_Encode(struct RovHostCamaraData* structPtr, void* data) {
    // [0, 1) RovCamaraType cam1[1]
    ((uint8_t*)data)[0] = (((((((*(uint8_t*)(&(structPtr->cam1))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [1, 2) RovCamaraType cam2[1]
    ((uint8_t*)data)[1] = (((((((*(uint8_t*)(&(structPtr->cam2))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 3) RovCamaraType cam3[1]
    ((uint8_t*)data)[2] = (((((((*(uint8_t*)(&(structPtr->cam3))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [3, 4) RovCamaraType cam4[1]
    ((uint8_t*)data)[3] = (((((((*(uint8_t*)(&(structPtr->cam4))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 5) RovCamaraType cam5[1]
    ((uint8_t*)data)[4] = (((((((*(uint8_t*)(&(structPtr->cam5))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [5, 6) RovCamaraType cam6[1]
    ((uint8_t*)data)[5] = (((((((*(uint8_t*)(&(structPtr->cam6))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovHostCamaraData
static bool RovHostCamaraData_Decode(void* data, struct RovHostCamaraData* structPtr) {
    // [0, 1) RovCamaraType cam1[1]
    (*(uint8_t*)(&(structPtr->cam1))) = ((uint8_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    // [1, 2) RovCamaraType cam2[1]
    (*(uint8_t*)(&(structPtr->cam2))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 0);
    // [2, 3) RovCamaraType cam3[1]
    (*(uint8_t*)(&(structPtr->cam3))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    // [3, 4) RovCamaraType cam4[1]
    (*(uint8_t*)(&(structPtr->cam4))) = ((uint8_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 0);
    // [4, 5) RovCamaraType cam5[1]
    (*(uint8_t*)(&(structPtr->cam5))) = ((uint8_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    // [5, 6) RovCamaraType cam6[1]
    (*(uint8_t*)(&(structPtr->cam6))) = ((uint8_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 0);
    return true;
}

// Struct: RovModeModeAData [6] {6 fields}
struct RovModeModeAData {
    // [0, 1) NormalField: bool side_push[1]
    bool side_push;
    // [1, 2) NormalField: bool tilt[1]
    bool tilt;
    // [2, 3) NormalField: bool roll[1]
    bool roll;
    // [3, 4) NormalField: bool auxiliary[1]
    bool auxiliary;
    // [4, 5) NormalField: bool rescue[1]
    bool rescue;
    // [5, 6) NormalField: bool module[1]
    bool module;
};

// Methods: bool side_push[1]
// Getter: RovModeModeAData_GetRaw_side_push
static bool RovModeModeAData_GetRaw_side_push(struct RovModeModeAData* value) {
    return value->side_push;
}

// Setter: RovModeModeAData_SetRaw_side_push
static void RovModeModeAData_SetRaw_side_push(struct RovModeModeAData* structPtr, bool value) {
    structPtr->side_push = value;
}

// Methods: bool tilt[1]
// Getter: RovModeModeAData_GetRaw_tilt
static bool RovModeModeAData_GetRaw_tilt(struct RovModeModeAData* value) {
    return value->tilt;
}

// Setter: RovModeModeAData_SetRaw_tilt
static void RovModeModeAData_SetRaw_tilt(struct RovModeModeAData* structPtr, bool value) {
    structPtr->tilt = value;
}

// Methods: bool roll[1]
// Getter: RovModeModeAData_GetRaw_roll
static bool RovModeModeAData_GetRaw_roll(struct RovModeModeAData* value) {
    return value->roll;
}

// Setter: RovModeModeAData_SetRaw_roll
static void RovModeModeAData_SetRaw_roll(struct RovModeModeAData* structPtr, bool value) {
    structPtr->roll = value;
}

// Methods: bool auxiliary[1]
// Getter: RovModeModeAData_GetRaw_auxiliary
static bool RovModeModeAData_GetRaw_auxiliary(struct RovModeModeAData* value) {
    return value->auxiliary;
}

// Setter: RovModeModeAData_SetRaw_auxiliary
static void RovModeModeAData_SetRaw_auxiliary(struct RovModeModeAData* structPtr, bool value) {
    structPtr->auxiliary = value;
}

// Methods: bool rescue[1]
// Getter: RovModeModeAData_GetRaw_rescue
static bool RovModeModeAData_GetRaw_rescue(struct RovModeModeAData* value) {
    return value->rescue;
}

// Setter: RovModeModeAData_SetRaw_rescue
static void RovModeModeAData_SetRaw_rescue(struct RovModeModeAData* structPtr, bool value) {
    structPtr->rescue = value;
}

// Methods: bool module[1]
// Getter: RovModeModeAData_GetRaw_module
static bool RovModeModeAData_GetRaw_module(struct RovModeModeAData* value) {
    return value->module;
}

// Setter: RovModeModeAData_SetRaw_module
static void RovModeModeAData_SetRaw_module(struct RovModeModeAData* structPtr, bool value) {
    structPtr->module = value;
}

static const unsigned long long RovModeModeAData_Size = 6;
// Encoder: RovModeModeAData
static void RovModeModeAData_Encode(struct RovModeModeAData* structPtr, void* data) {
    // [0, 1) bool side_push[1]
    ((uint8_t*)data)[0] = (((((((*(uint8_t*)(&(structPtr->side_push))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [1, 2) bool tilt[1]
    ((uint8_t*)data)[1] = (((((((*(uint8_t*)(&(structPtr->tilt))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 3) bool roll[1]
    ((uint8_t*)data)[2] = (((((((*(uint8_t*)(&(structPtr->roll))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [3, 4) bool auxiliary[1]
    ((uint8_t*)data)[3] = (((((((*(uint8_t*)(&(structPtr->auxiliary))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 5) bool rescue[1]
    ((uint8_t*)data)[4] = (((((((*(uint8_t*)(&(structPtr->rescue))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [5, 6) bool module[1]
    ((uint8_t*)data)[5] = (((((((*(uint8_t*)(&(structPtr->module))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovModeModeAData
static bool RovModeModeAData_Decode(void* data, struct RovModeModeAData* structPtr) {
    // [0, 1) bool side_push[1]
    (*(uint8_t*)(&(structPtr->side_push))) = ((uint8_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    // [1, 2) bool tilt[1]
    (*(uint8_t*)(&(structPtr->tilt))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 0);
    // [2, 3) bool roll[1]
    (*(uint8_t*)(&(structPtr->roll))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    // [3, 4) bool auxiliary[1]
    (*(uint8_t*)(&(structPtr->auxiliary))) = ((uint8_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 0);
    // [4, 5) bool rescue[1]
    (*(uint8_t*)(&(structPtr->rescue))) = ((uint8_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    // [5, 6) bool module[1]
    (*(uint8_t*)(&(structPtr->module))) = ((uint8_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 0);
    return true;
}

// Struct: RovModeModeBData [6] {6 fields}
struct RovModeModeBData {
    // [0, 1) NormalField: bool keep_heading[1]
    bool keep_heading;
    // [1, 2) NormalField: bool keep_depth[1]
    bool keep_depth;
    // [2, 3) NormalField: bool auto_stabilize[1]
    bool auto_stabilize;
    // [3, 4) NormalField: bool auto_schedule[1]
    bool auto_schedule;
    // [4, 5) NormalField: bool auto_execute[1]
    bool auto_execute;
    // [5, 6) NormalField: bool auto_avoiding_obstacles[1]
    bool auto_avoiding_obstacles;
};

// Methods: bool keep_heading[1]
// Getter: RovModeModeBData_GetRaw_keep_heading
static bool RovModeModeBData_GetRaw_keep_heading(struct RovModeModeBData* value) {
    return value->keep_heading;
}

// Setter: RovModeModeBData_SetRaw_keep_heading
static void RovModeModeBData_SetRaw_keep_heading(struct RovModeModeBData* structPtr, bool value) {
    structPtr->keep_heading = value;
}

// Methods: bool keep_depth[1]
// Getter: RovModeModeBData_GetRaw_keep_depth
static bool RovModeModeBData_GetRaw_keep_depth(struct RovModeModeBData* value) {
    return value->keep_depth;
}

// Setter: RovModeModeBData_SetRaw_keep_depth
static void RovModeModeBData_SetRaw_keep_depth(struct RovModeModeBData* structPtr, bool value) {
    structPtr->keep_depth = value;
}

// Methods: bool auto_stabilize[1]
// Getter: RovModeModeBData_GetRaw_auto_stabilize
static bool RovModeModeBData_GetRaw_auto_stabilize(struct RovModeModeBData* value) {
    return value->auto_stabilize;
}

// Setter: RovModeModeBData_SetRaw_auto_stabilize
static void RovModeModeBData_SetRaw_auto_stabilize(struct RovModeModeBData* structPtr, bool value) {
    structPtr->auto_stabilize = value;
}

// Methods: bool auto_schedule[1]
// Getter: RovModeModeBData_GetRaw_auto_schedule
static bool RovModeModeBData_GetRaw_auto_schedule(struct RovModeModeBData* value) {
    return value->auto_schedule;
}

// Setter: RovModeModeBData_SetRaw_auto_schedule
static void RovModeModeBData_SetRaw_auto_schedule(struct RovModeModeBData* structPtr, bool value) {
    structPtr->auto_schedule = value;
}

// Methods: bool auto_execute[1]
// Getter: RovModeModeBData_GetRaw_auto_execute
static bool RovModeModeBData_GetRaw_auto_execute(struct RovModeModeBData* value) {
    return value->auto_execute;
}

// Setter: RovModeModeBData_SetRaw_auto_execute
static void RovModeModeBData_SetRaw_auto_execute(struct RovModeModeBData* structPtr, bool value) {
    structPtr->auto_execute = value;
}

// Methods: bool auto_avoiding_obstacles[1]
// Getter: RovModeModeBData_GetRaw_auto_avoiding_obstacles
static bool RovModeModeBData_GetRaw_auto_avoiding_obstacles(struct RovModeModeBData* value) {
    return value->auto_avoiding_obstacles;
}

// Setter: RovModeModeBData_SetRaw_auto_avoiding_obstacles
static void RovModeModeBData_SetRaw_auto_avoiding_obstacles(struct RovModeModeBData* structPtr, bool value) {
    structPtr->auto_avoiding_obstacles = value;
}

static const unsigned long long RovModeModeBData_Size = 6;
// Encoder: RovModeModeBData
static void RovModeModeBData_Encode(struct RovModeModeBData* structPtr, void* data) {
    // [0, 1) bool keep_heading[1]
    ((uint8_t*)data)[0] = (((((((*(uint8_t*)(&(structPtr->keep_heading))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [1, 2) bool keep_depth[1]
    ((uint8_t*)data)[1] = (((((((*(uint8_t*)(&(structPtr->keep_depth))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [2, 3) bool auto_stabilize[1]
    ((uint8_t*)data)[2] = (((((((*(uint8_t*)(&(structPtr->auto_stabilize))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [3, 4) bool auto_schedule[1]
    ((uint8_t*)data)[3] = (((((((*(uint8_t*)(&(structPtr->auto_schedule))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [4, 5) bool auto_execute[1]
    ((uint8_t*)data)[4] = (((((((*(uint8_t*)(&(structPtr->auto_execute))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
    // [5, 6) bool auto_avoiding_obstacles[1]
    ((uint8_t*)data)[5] = (((((((*(uint8_t*)(&(structPtr->auto_avoiding_obstacles))) >> 0)) & 0b11111111) >> 0) << 0) & 0b11111111);
}

// Decoder: RovModeModeBData
static bool RovModeModeBData_Decode(void* data, struct RovModeModeBData* structPtr) {
    // [0, 1) bool keep_heading[1]
    (*(uint8_t*)(&(structPtr->keep_heading))) = ((uint8_t)(((((uint8_t*)data)[0] & 0b11111111) >> 0)) << 0);
    // [1, 2) bool keep_depth[1]
    (*(uint8_t*)(&(structPtr->keep_depth))) = ((uint8_t)(((((uint8_t*)data)[1] & 0b11111111) >> 0)) << 0);
    // [2, 3) bool auto_stabilize[1]
    (*(uint8_t*)(&(structPtr->auto_stabilize))) = ((uint8_t)(((((uint8_t*)data)[2] & 0b11111111) >> 0)) << 0);
    // [3, 4) bool auto_schedule[1]
    (*(uint8_t*)(&(structPtr->auto_schedule))) = ((uint8_t)(((((uint8_t*)data)[3] & 0b11111111) >> 0)) << 0);
    // [4, 5) bool auto_execute[1]
    (*(uint8_t*)(&(structPtr->auto_execute))) = ((uint8_t)(((((uint8_t*)data)[4] & 0b11111111) >> 0)) << 0);
    // [5, 6) bool auto_avoiding_obstacles[1]
    (*(uint8_t*)(&(structPtr->auto_avoiding_obstacles))) = ((uint8_t)(((((uint8_t*)data)[5] & 0b11111111) >> 0)) << 0);
    return true;
}
